struct SurfaceOutput {
  vec3 Albedo;
  vec3 Normal;
  vec3 Emission;
  float Specular;
  float Gloss;
  float Alpha;
};
struct Input {
  vec2 uv_MainTex;
  vec2 uv_BumpMap;
  vec3 worldRefl;
};
struct v2f_surf {
  vec4 pos;
  float fog;
  vec4 hip_pack0;
  vec3 lightDir;
  vec3 viewDir;
  vec3 _LightCoord;
};
varying vec4 xlv_FOG;
uniform vec4 _SpecColor;
uniform float _Shininess;
uniform vec4 _ReflectColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightTexture0;
uniform vec4 _LightColor0;
uniform samplerCube _Cube;
uniform vec4 _Color;
uniform sampler2D _BumpMap;
void main ()
{
  v2f_surf xlt_IN;
  xlt_IN.pos = vec4(0.000000, 0.000000, 0.000000, 0.000000);
  xlt_IN.fog = xlv_FOG.x;
  xlt_IN.hip_pack0 = gl_TexCoord[0].xyzw;
  xlt_IN.lightDir = gl_TexCoord[1].xyz;
  xlt_IN.viewDir = gl_TexCoord[2].xyz;
  xlt_IN._LightCoord = gl_TexCoord[3].xyz;
  v2f_surf IN;
  IN = xlt_IN;
  vec4 c;
  vec3 lightDir;
  SurfaceOutput o;
  Input surfIN;
  surfIN.uv_MainTex = xlt_IN.hip_pack0.xy;
  surfIN.uv_BumpMap = xlt_IN.hip_pack0.zw;
  o.Albedo = vec3(0.000000, 0.000000, 0.000000);
  o.Emission = vec3(0.000000, 0.000000, 0.000000);
  o.Specular = 0.000000;
  o.Alpha = 0.000000;
  o.Gloss = 0.000000;
  Input IN_i0;
  IN_i0 = surfIN;
  SurfaceOutput o_i0;
  o_i0 = o;
  vec4 tex;
  vec4 tmpvar_60;
  tmpvar_60 = texture2D (_MainTex, surfIN.uv_MainTex);
  tex = tmpvar_60;
  o_i0.Albedo = (tmpvar_60 * _Color).xyz;
  o_i0.Gloss = tmpvar_60.w;
  o_i0.Specular = _Shininess;
  vec4 tmpvar_66;
  tmpvar_66 = texture2D (_BumpMap, IN_i0.uv_BumpMap);
  vec4 normal;
  normal.xy = ((tmpvar_66.wy * 2.000000) - 1.000000).xy;
  float tmpvar_70;
  tmpvar_70 = sqrt (((1.000000 - (normal.x * normal.x)) - (normal.y * normal.y)));
  normal.z = float(vec3(tmpvar_70));
  o_i0.Normal = normal.xyz;
  vec4 tmpvar_75;
  tmpvar_75 = textureCube (_Cube, IN_i0.worldRefl);
  vec4 tmpvar_77;
  tmpvar_77 = (tmpvar_75 * tex.w);
  o_i0.Emission = (tmpvar_77.xyz * _ReflectColor.xyz);
  o_i0.Alpha = (tmpvar_77.w * _ReflectColor.w);
  o = o_i0;
  vec3 tmpvar_80;
  tmpvar_80 = IN.lightDir;
  lightDir = tmpvar_80;
  vec3 tmpvar_81;
  tmpvar_81 = normalize (tmpvar_80);
  lightDir = tmpvar_81;
  vec3 tmpvar_84;
  tmpvar_84 = normalize (IN.viewDir.xyz);
  float tmpvar_85;
  tmpvar_85 = dot (IN._LightCoord, IN._LightCoord);
  vec4 tmpvar_88;
  tmpvar_88 = texture2D (_LightTexture0, vec2(tmpvar_85));
  SurfaceOutput s;
  s = o;
  vec3 lightDir_i0;
  lightDir_i0 = lightDir;
  float atten;
  atten = tmpvar_88.w;
  vec4 c_i0_i1;
  float diff;
  vec3 h;
  vec3 tmpvar_91;
  tmpvar_91 = normalize ((lightDir + tmpvar_84));
  h = tmpvar_91;
  float tmpvar_93;
  tmpvar_93 = dot (s.Normal, lightDir_i0);
  float tmpvar_94;
  tmpvar_94 = max (0.000000, tmpvar_93);
  diff = tmpvar_94;
  float tmpvar_96;
  tmpvar_96 = dot (s.Normal, h);
  float tmpvar_97;
  tmpvar_97 = max (0.000000, tmpvar_96);
  float tmpvar_99;
  tmpvar_99 = pow (tmpvar_97, (s.Specular * 128.000000));
  float tmpvar_100;
  tmpvar_100 = (tmpvar_99 * s.Gloss);
  c_i0_i1.xyz = ((((s.Albedo * _LightColor0.xyz) * diff) + ((_LightColor0.xyz * _SpecColor.xyz) * tmpvar_100)) * (atten * 2.000000)).xyz;
  c_i0_i1.w = float(vec4((s.Alpha + (((_LightColor0.w * _SpecColor.w) * tmpvar_100) * atten))));
  c = c_i0_i1;
  c.w = float(vec4(0.000000, 0.000000, 0.000000, 0.000000));
  gl_FragData[0] = c.xyzw;
}

