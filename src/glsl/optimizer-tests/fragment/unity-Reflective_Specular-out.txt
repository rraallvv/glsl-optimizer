struct SurfaceOutput {
  vec3 Albedo;
  vec3 Normal;
  vec3 Emission;
  float Specular;
  float Gloss;
  float Alpha;
};
struct Input {
  vec2 uv_MainTex;
  vec3 worldRefl;
};
struct v2f_surf {
  vec4 pos;
  float fog;
  vec2 hip_pack0;
  vec3 normal;
  vec3 lightDir;
  vec3 viewDir;
  vec4 _LightCoord;
};
uniform vec4 _Color;
uniform samplerCube _Cube;
uniform vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _MainTex;
uniform vec4 _ReflectColor;
uniform float _Shininess;
uniform vec4 _SpecColor;
varying vec4 xlv_FOG;
void main ()
{
  v2f_surf xlt_IN;
  xlt_IN.pos = vec4 (0.000000, 0.000000, 0.000000, 0.000000);
  xlt_IN.fog = xlv_FOG.x;
  xlt_IN.hip_pack0 = gl_TexCoord[0].xy;
  xlt_IN.normal = gl_TexCoord[1].xyz;
  xlt_IN.lightDir = gl_TexCoord[2].xyz;
  xlt_IN.viewDir = gl_TexCoord[3].xyz;
  xlt_IN._LightCoord = gl_TexCoord[4].xyzw;
  v2f_surf IN;
  IN = xlt_IN;
  Input surfIN;
  SurfaceOutput o;
  vec3 lightDir;
  vec4 c;
  surfIN.uv_MainTex = xlt_IN.hip_pack0.xy;
  o.Albedo = vec3 (0.000000, 0.000000, 0.000000);
  o.Emission = vec3 (0.000000, 0.000000, 0.000000);
  o.Specular = 0.000000;
  o.Alpha = 0.000000;
  o.Gloss = 0.000000;
  o.Normal = xlt_IN.normal;
  Input IN_i0;
  IN_i0 = surfIN;
  SurfaceOutput o_i0;
  o_i0 = o;
  vec4 tex;
  vec4 tmpvar_56;
  tmpvar_56 = texture2D (_MainTex, IN_i0.uv_MainTex);
  tex = tmpvar_56;
  o_i0.Albedo = (tmpvar_56 * _Color).xyz;
  o_i0.Gloss = tmpvar_56.w;
  o_i0.Specular = _Shininess;
  vec4 tmpvar_62;
  tmpvar_62 = textureCube (_Cube, IN_i0.worldRefl);
  vec4 tmpvar_64;
  tmpvar_64 = (tmpvar_62 * tex.w);
  o_i0.Emission = (tmpvar_64.xyz * _ReflectColor.xyz);
  o_i0.Alpha = (tmpvar_64.w * _ReflectColor.w);
  o = o_i0;
  lightDir = IN.lightDir;
  vec3 tmpvar_68;
  tmpvar_68 = normalize (lightDir);
  lightDir = tmpvar_68;
  vec3 tmpvar_71;
  tmpvar_71 = normalize (IN.viewDir.xyz);
  float tmpvar_72;
  vec4 LightCoord;
  LightCoord = IN._LightCoord;
  vec4 tmpvar_74;
  tmpvar_74 = texture2D (_LightTexture0, ((LightCoord.xy / LightCoord.w) + 0.500000));
  tmpvar_72 = tmpvar_74.w;
  vec3 LightCoord_i0;
  LightCoord_i0 = IN._LightCoord.xyz;
  float tmpvar_77;
  tmpvar_77 = dot (LightCoord_i0, LightCoord_i0);
  vec4 tmpvar_80;
  tmpvar_80 = texture2D (_LightTextureB0, vec2(tmpvar_77));
  SurfaceOutput s;
  s = o;
  vec3 lightDir_i0;
  lightDir_i0 = lightDir;
  float atten;
  atten = ((float((IN._LightCoord.z > 0.000000)) * tmpvar_72) * tmpvar_80.w);
  vec3 h;
  float diff;
  vec4 c_i0_i1;
  vec3 tmpvar_83;
  tmpvar_83 = normalize ((lightDir_i0 + tmpvar_71));
  h = tmpvar_83;
  float tmpvar_85;
  tmpvar_85 = dot (s.Normal, lightDir_i0);
  float tmpvar_86;
  tmpvar_86 = max (0.000000, tmpvar_85);
  diff = tmpvar_86;
  float tmpvar_88;
  tmpvar_88 = dot (s.Normal, h);
  float tmpvar_89;
  tmpvar_89 = max (0.000000, tmpvar_88);
  float tmpvar_91;
  tmpvar_91 = pow (tmpvar_89, (s.Specular * 128.000000));
  float tmpvar_92;
  tmpvar_92 = (tmpvar_91 * s.Gloss);
  c_i0_i1.xyz = ((((s.Albedo * _LightColor0.xyz) * diff) + ((_LightColor0.xyz * _SpecColor.xyz) * tmpvar_92)) * (atten * 2.000000)).xyz;
  c_i0_i1.w = float(vec4((s.Alpha + (((_LightColor0.w * _SpecColor.w) * tmpvar_92) * atten))));
  c = c_i0_i1;
  c.w = float(vec4 (0.000000, 0.000000, 0.000000, 0.000000));
  gl_FragData[0] = c.xyzw;
}

