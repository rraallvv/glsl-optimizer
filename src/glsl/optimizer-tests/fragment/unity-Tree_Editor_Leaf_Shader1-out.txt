struct LeafSurfaceOutput {
  vec3 Albedo;
  vec3 Normal;
  vec3 Emission;
  vec3 Translucency;
  float Specular;
  float Gloss;
  float Alpha;
};
struct v2f_surf {
  vec4 pos;
  vec3 _ShadowCoord0;
  vec3 _ShadowCoord1;
  vec3 _ShadowCoord2;
  vec3 _ShadowCoord3;
  vec2 _ShadowZFade;
  vec2 hip_pack0;
  vec4 lop_color;
};
uniform sampler2D _TranslucencyMap;
uniform vec4 _TranslucencyColor;
uniform float _Shininess;
uniform sampler2D _ShadowMapTexture;
uniform vec4 _ProjectionParams;
uniform sampler2D _MainTex;
uniform vec4 _LightSplitsNear;
uniform vec4 _LightSplitsFar;
uniform vec4 _LightShadowData;
uniform sampler2D _GlossMap;
uniform float _Cutoff;
uniform sampler2D _BumpMap;
void main ()
{
  v2f_surf xlt_IN;
  xlt_IN.pos = vec4(0.000000, 0.000000, 0.000000, 0.000000);
  xlt_IN._ShadowCoord0 = gl_TexCoord[0].xyz;
  xlt_IN._ShadowCoord1 = gl_TexCoord[1].xyz;
  xlt_IN._ShadowCoord2 = gl_TexCoord[2].xyz;
  xlt_IN._ShadowCoord3 = gl_TexCoord[3].xyz;
  xlt_IN._ShadowZFade = gl_TexCoord[4].xy;
  xlt_IN.hip_pack0 = gl_TexCoord[5].xy;
  xlt_IN.lop_color = gl_Color.xyzw;
  v2f_surf IN;
  IN = xlt_IN;
  vec4 res;
  vec4 z;
  LeafSurfaceOutput o;
  vec2 tmpvar_110;
  vec4 tmpvar_111;
  tmpvar_110 = xlt_IN.hip_pack0.xy;
  tmpvar_111 = xlt_IN.lop_color;
  o.Albedo = vec3(0.000000, 0.000000, 0.000000);
  o.Emission = vec3(0.000000, 0.000000, 0.000000);
  o.Specular = 0.000000;
  o.Alpha = 0.000000;
  LeafSurfaceOutput o_i0;
  o_i0 = o;
  vec4 tmpvar_60;
  tmpvar_60 = texture2D (_MainTex, tmpvar_110);
  o_i0.Albedo = (tmpvar_60.xyz * tmpvar_111.xyz);
  o_i0.Translucency = (texture2D (_TranslucencyMap, tmpvar_110).xyz * _TranslucencyColor.xyz);
  o_i0.Gloss = texture2D (_GlossMap, tmpvar_110).w;
  o_i0.Alpha = (tmpvar_60.w * tmpvar_111.w);
  o_i0.Specular = _Shininess;
  vec4 normal;
  normal.xy = ((texture2D (_BumpMap, tmpvar_110).wy * 2.000000) - 1.000000).xy;
  normal.z = float(vec3(sqrt (((1.000000 - (normal.x * normal.x)) - (normal.y * normal.y)))));
  o_i0.Normal = normal.xyz;
  o = o_i0;
  float x;
  x = (o_i0.Alpha - _Cutoff);
  if ((x < 0.000000)) {
    discard;
  };
  vec4 tmpvar_78;
  tmpvar_78 = IN._ShadowZFade.xxxx;
  z = tmpvar_78;
  vec4 tmpvar_86;
  tmpvar_86 = (vec4(greaterThanEqual (tmpvar_78, _LightSplitsNear)).xyzw * vec4(lessThan (tmpvar_78, _LightSplitsFar)).xyzw);
  vec4 tmpvar_87;
  tmpvar_87.xyz = vec3(((((IN._ShadowCoord0 * tmpvar_86.x) + (IN._ShadowCoord1 * tmpvar_86.y)) + (IN._ShadowCoord2 * tmpvar_86.z)) + (IN._ShadowCoord3 * tmpvar_86.w)).xyz);
  tmpvar_87.w = float(vec4(1.000000, 1.000000, 1.000000, 1.000000));
  vec4 tmpvar_89;
  tmpvar_89 = texture2D (_ShadowMapTexture, tmpvar_87.xy);
  float tmpvar_90;
  if ((tmpvar_89.x < tmpvar_87.z)) {
    tmpvar_90 = _LightShadowData.x;
  } else {
    tmpvar_90 = 1.000000;
  };
  res.x = clamp ((tmpvar_90 + clamp (IN._ShadowZFade.y, 0.000000, 1.000000)), 0.000000, 1.000000);
  res.y = float(vec2(1.000000, 1.000000));
  vec2 enc;
  vec2 tmpvar_106;
  tmpvar_106 = fract ((vec2(1.000000, 255.000000) * (1.000000 - (z * _ProjectionParams.w)).x));
  enc = tmpvar_106;
  enc.x = (tmpvar_106.x - (tmpvar_106.y * 0.003922));
  res.zw = vec2(enc.xy);
  gl_FragData[0] = res.xyzw;
}

