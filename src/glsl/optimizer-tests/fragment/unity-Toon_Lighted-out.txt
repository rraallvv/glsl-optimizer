struct SurfaceOutput {
  vec3 Albedo;
  vec3 Normal;
  vec3 Emission;
  float Specular;
  float Gloss;
  float Alpha;
};
struct Input {
  vec2 uv_MainTex;
};
struct v2f_surf {
  vec4 pos;
  float fog;
  vec2 hip_pack0;
  vec3 normal;
  vec3 lightDir;
  vec2 _LightCoord;
};
uniform vec4 _Color;
uniform vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform sampler2D _MainTex;
uniform sampler2D _Ramp;
varying vec4 xlv_FOG;
void main ()
{
  v2f_surf xlt_IN;
  xlt_IN.pos = vec4 (0.000000, 0.000000, 0.000000, 0.000000);
  xlt_IN.fog = xlv_FOG.x;
  xlt_IN.hip_pack0 = gl_TexCoord[0].xy;
  xlt_IN.normal = gl_TexCoord[1].xyz;
  xlt_IN.lightDir = gl_TexCoord[2].xyz;
  xlt_IN._LightCoord = gl_TexCoord[3].xy;
  v2f_surf IN;
  IN = xlt_IN;
  Input surfIN;
  SurfaceOutput o;
  vec3 lightDir;
  vec4 c;
  surfIN.uv_MainTex = xlt_IN.hip_pack0.xy;
  o.Albedo = vec3 (0.000000, 0.000000, 0.000000);
  o.Emission = vec3 (0.000000, 0.000000, 0.000000);
  o.Specular = 0.000000;
  o.Alpha = 0.000000;
  o.Gloss = 0.000000;
  o.Normal = xlt_IN.normal;
  Input IN_i0;
  IN_i0 = surfIN;
  SurfaceOutput o_i0;
  o_i0 = o;
  vec4 tmpvar_35;
  tmpvar_35 = texture2D (_MainTex, IN_i0.uv_MainTex);
  vec4 tmpvar_36;
  tmpvar_36 = (tmpvar_35 * _Color);
  o_i0.Albedo = tmpvar_36.xyz;
  o_i0.Alpha = tmpvar_36.w;
  o = o_i0;
  lightDir = IN.lightDir;
  vec4 tmpvar_40;
  tmpvar_40 = texture2D (_LightTexture0, IN._LightCoord);
  SurfaceOutput s;
  s = o;
  float atten;
  atten = tmpvar_40.w;
  vec4 c_i0_i1;
  float tmpvar_43;
  tmpvar_43 = dot (s.Normal, lightDir);
  float tmpvar_44;
  tmpvar_44 = ((tmpvar_43 * 0.500000) + 0.500000);
  vec2 tmpvar_45;
  tmpvar_45.x = float(vec2(tmpvar_44));
  tmpvar_45.y = float(vec2(tmpvar_44));
  vec4 tmpvar_46;
  tmpvar_46 = texture2D (_Ramp, tmpvar_45);
  c_i0_i1.xyz = (((s.Albedo * _LightColor0.xyz) * tmpvar_46.xyz) * (atten * 2.000000)).xyz;
  c_i0_i1.w = float(vec4 (0.000000, 0.000000, 0.000000, 0.000000));
  c = c_i0_i1;
  c.w = float(vec4 (0.000000, 0.000000, 0.000000, 0.000000));
  gl_FragData[0] = c.xyzw;
}

