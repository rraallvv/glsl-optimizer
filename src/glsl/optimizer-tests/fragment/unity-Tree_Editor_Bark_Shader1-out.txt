struct SurfaceOutput {
  vec3 Albedo;
  vec3 Normal;
  vec3 Emission;
  float Specular;
  float Gloss;
  float Alpha;
};
struct Input {
  vec2 uv_MainTex;
  vec4 color;
};
struct v2f_surf {
  vec4 pos;
  float fog;
  vec2 hip_pack0;
  vec4 lop_color;
  vec3 lightDir;
  vec3 viewDir;
  vec3 _LightCoord;
};
uniform sampler2D _BumpMap;
uniform vec4 _Color;
uniform sampler2D _GlossMap;
uniform vec4 _LightColor0;
uniform samplerCube _LightTexture0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _MainTex;
uniform float _Shininess;
varying vec4 xlv_FOG;
void main ()
{
  v2f_surf xlt_IN;
  xlt_IN.pos = vec4(0.000000, 0.000000, 0.000000, 0.000000);
  xlt_IN.fog = xlv_FOG.x;
  xlt_IN.hip_pack0 = gl_TexCoord[0].xy;
  xlt_IN.lop_color = gl_Color.xyzw;
  xlt_IN.lightDir = gl_TexCoord[1].xyz;
  xlt_IN.viewDir = gl_TexCoord[2].xyz;
  xlt_IN._LightCoord = gl_TexCoord[3].xyz;
  v2f_surf IN;
  IN = xlt_IN;
  Input surfIN;
  SurfaceOutput o;
  vec3 lightDir;
  vec4 c;
  surfIN.uv_MainTex = xlt_IN.hip_pack0.xy;
  surfIN.color = xlt_IN.lop_color;
  o.Albedo = vec3(0.000000, 0.000000, 0.000000);
  o.Emission = vec3(0.000000, 0.000000, 0.000000);
  o.Specular = 0.000000;
  o.Alpha = 0.000000;
  o.Gloss = 0.000000;
  Input IN_i0;
  IN_i0 = surfIN;
  SurfaceOutput o_i0;
  o_i0 = o;
  vec4 tmpvar_57;
  tmpvar_57 = texture2D (_MainTex, IN_i0.uv_MainTex);
  o_i0.Albedo = (tmpvar_57.xyz * IN_i0.color.xyz);
  vec4 tmpvar_60;
  tmpvar_60 = texture2D (_GlossMap, IN_i0.uv_MainTex);
  o_i0.Gloss = tmpvar_60.w;
  o_i0.Alpha = _Color.w;
  o_i0.Specular = _Shininess;
  vec4 tmpvar_64;
  tmpvar_64 = texture2D (_BumpMap, IN_i0.uv_MainTex);
  vec4 normal;
  normal.xy = ((tmpvar_64.wy * 2.000000) - 1.000000).xy;
  float tmpvar_68;
  tmpvar_68 = sqrt (((1.000000 - (normal.x * normal.x)) - (normal.y * normal.y)));
  normal.z = float(vec3(tmpvar_68));
  o_i0.Normal = normal.xyz;
  o = o_i0;
  lightDir = IN.lightDir;
  vec3 tmpvar_73;
  tmpvar_73 = normalize (lightDir);
  lightDir = tmpvar_73;
  vec3 tmpvar_76;
  tmpvar_76 = normalize (IN.viewDir.xyz);
  float tmpvar_77;
  tmpvar_77 = dot (IN._LightCoord, IN._LightCoord);
  vec4 tmpvar_80;
  tmpvar_80 = texture2D (_LightTextureB0, vec2(tmpvar_77));
  vec4 tmpvar_81;
  tmpvar_81 = textureCube (_LightTexture0, IN._LightCoord);
  SurfaceOutput s;
  s = o;
  vec3 lightDir_i0;
  lightDir_i0 = lightDir;
  float atten;
  atten = (tmpvar_80.w * tmpvar_81.w);
  vec3 h;
  float diff;
  vec4 c_i0_i1;
  vec3 tmpvar_84;
  tmpvar_84 = normalize ((lightDir_i0 + tmpvar_76));
  h = tmpvar_84;
  float tmpvar_86;
  tmpvar_86 = dot (s.Normal, lightDir_i0);
  float tmpvar_87;
  tmpvar_87 = max (0.000000, tmpvar_86);
  diff = tmpvar_87;
  float tmpvar_89;
  tmpvar_89 = dot (s.Normal, h);
  float tmpvar_90;
  tmpvar_90 = max (0.000000, tmpvar_89);
  float tmpvar_92;
  tmpvar_92 = pow (tmpvar_90, (s.Specular * 128.000000));
  float tmpvar_93;
  tmpvar_93 = (tmpvar_92 * s.Gloss);
  c_i0_i1.xyz = ((((s.Albedo * _LightColor0.xyz) * diff) + (_LightColor0.xyz * tmpvar_93)) * (atten * 2.000000)).xyz;
  c_i0_i1.w = float(vec4((((_LightColor0.w * tmpvar_93) * atten) * s.Alpha)));
  c = c_i0_i1;
  c.w = float(vec4(0.000000, 0.000000, 0.000000, 0.000000));
  gl_FragData[0] = c.xyzw;
}

