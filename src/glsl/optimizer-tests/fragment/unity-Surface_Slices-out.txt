struct SurfaceOutput {
  vec3 Albedo;
  vec3 Normal;
  vec3 Emission;
  float Specular;
  float Gloss;
  float Alpha;
};
struct Input {
  vec2 uv_MainTex;
  vec3 worldPos;
};
struct v2f_surf {
  vec4 pos;
  float fog;
  vec2 hip_pack0;
  vec3 worldPos;
  vec3 normal;
  vec3 lightDir;
  vec4 _LightCoord;
};
varying vec4 xlv_FOG;
uniform sampler2D _MainTex;
uniform sampler2D _LightTextureB0;
uniform sampler2D _LightTexture0;
uniform vec4 _LightColor0;
void main ()
{
  v2f_surf xlt_IN;
  xlt_IN.pos = vec4(0.000000, 0.000000, 0.000000, 0.000000);
  xlt_IN.fog = xlv_FOG.x;
  xlt_IN.hip_pack0 = gl_TexCoord[0].xy;
  xlt_IN.worldPos = gl_TexCoord[1].xyz;
  xlt_IN.normal = gl_TexCoord[2].xyz;
  xlt_IN.lightDir = gl_TexCoord[3].xyz;
  xlt_IN._LightCoord = gl_TexCoord[4].xyzw;
  v2f_surf IN;
  IN = xlt_IN;
  vec4 c;
  SurfaceOutput o;
  Input surfIN;
  surfIN.uv_MainTex = xlt_IN.hip_pack0.xy;
  surfIN.worldPos = xlt_IN.worldPos;
  o.Albedo = vec3(0.000000, 0.000000, 0.000000);
  o.Emission = vec3(0.000000, 0.000000, 0.000000);
  o.Specular = 0.000000;
  o.Alpha = 0.000000;
  o.Gloss = 0.000000;
  o.Normal = xlt_IN.normal;
  Input IN_i0;
  IN_i0 = surfIN;
  SurfaceOutput o_i0;
  o_i0 = o;
  float x;
  x = (fract (((surfIN.worldPos.y + (surfIN.worldPos.z * 0.100000)) * 5.000000)) - 0.500000);
  if ((x < 0.000000)) {
    discard;
  };
  o_i0.Albedo = texture2D (_MainTex, IN_i0.uv_MainTex).xyz;
  o = o_i0;
  vec4 LightCoord;
  LightCoord = IN._LightCoord;
  vec3 LightCoord_i0;
  LightCoord_i0 = IN._LightCoord.xyz;
  vec4 c_i0;
  c_i0.xyz = ((o_i0.Albedo * _LightColor0.xyz) * ((max (0.000000, dot (o_i0.Normal, normalize (IN.lightDir))) * ((float((IN._LightCoord.z > 0.000000)) * texture2D (_LightTexture0, ((LightCoord.xy / LightCoord.w) + 0.500000)).w) * texture2D (_LightTextureB0, vec2(dot (LightCoord_i0, LightCoord_i0))).w)) * 2.000000)).xyz;
  c_i0.w = float(vec4(o_i0.Alpha));
  c = c_i0;
  c.w = float(vec4(0.000000, 0.000000, 0.000000, 0.000000));
  gl_FragData[0] = c.xyzw;
}

