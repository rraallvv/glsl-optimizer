struct SurfaceOutput {
  vec3 Albedo;
  vec3 Normal;
  vec3 Emission;
  float Specular;
  float Gloss;
  float Alpha;
};
struct v2f_surf {
  vec4 pos;
  float fog;
  vec2 hip_pack0;
  vec3 normal;
  vec3 lightDir;
  vec3 viewDir;
};
varying vec4 xlv_FOG;
uniform vec4 _SpecColor;
uniform float _Shininess;
uniform sampler2D _MainTex;
uniform vec4 _LightColor0;
uniform float _Cutoff;
uniform vec4 _Color;
void main ()
{
  v2f_surf xlt_IN;
  xlt_IN.pos = vec4(0.000000, 0.000000, 0.000000, 0.000000);
  xlt_IN.fog = xlv_FOG.x;
  xlt_IN.hip_pack0 = gl_TexCoord[0].xy;
  xlt_IN.normal = gl_TexCoord[1].xyz;
  xlt_IN.lightDir = gl_TexCoord[2].xyz;
  xlt_IN.viewDir = gl_TexCoord[3].xyz;
  v2f_surf IN;
  IN = xlt_IN;
  vec4 c;
  SurfaceOutput o;
  o.Albedo = vec3(0.000000, 0.000000, 0.000000);
  o.Emission = vec3(0.000000, 0.000000, 0.000000);
  o.Specular = 0.000000;
  o.Alpha = 0.000000;
  o.Gloss = 0.000000;
  o.Normal = xlt_IN.normal;
  SurfaceOutput o_i0;
  o_i0 = o;
  vec4 tmpvar_42;
  tmpvar_42 = texture2D (_MainTex, xlt_IN.hip_pack0.xy);
  o_i0.Albedo = (tmpvar_42.xyz * _Color.xyz);
  o_i0.Gloss = tmpvar_42.w;
  o_i0.Alpha = (tmpvar_42.w * _Color.w);
  o_i0.Specular = _Shininess;
  o = o_i0;
  float x;
  x = (o_i0.Alpha - _Cutoff);
  if ((x < 0.000000)) {
    discard;
  };
  vec3 tmpvar_48;
  tmpvar_48 = IN.lightDir;
  vec4 c_i0;
  float tmpvar_62;
  tmpvar_62 = (pow (max (0.000000, dot (o.Normal, normalize ((tmpvar_48 + normalize (IN.viewDir.xyz))))), (o.Specular * 128.000000)) * o.Gloss);
  c_i0.xyz = ((((o.Albedo * _LightColor0.xyz) * max (0.000000, dot (o.Normal, tmpvar_48))) + ((_LightColor0.xyz * _SpecColor.xyz) * tmpvar_62)) * 2.000000).xyz;
  c_i0.w = float(vec4((o.Alpha + ((_LightColor0.w * _SpecColor.w) * tmpvar_62))));
  c = c_i0;
  c.w = float(vec4(o.Alpha));
  gl_FragData[0] = c.xyzw;
}

