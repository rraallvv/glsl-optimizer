struct SurfaceOutput {
  vec3 Albedo;
  vec3 Normal;
  vec3 Emission;
  float Specular;
  float Gloss;
  float Alpha;
};
varying vec4 xlv_FOG;
uniform vec4 unity_Ambient;
uniform vec4 _SpecColor;
uniform float _Shininess;
uniform vec4 _ReflectColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightBuffer;
uniform samplerCube _Cube;
uniform vec4 _Color;
void main ()
{
  vec4 col;
  vec4 light;
  SurfaceOutput o;
  o.Albedo = vec3(0.000000, 0.000000, 0.000000);
  o.Emission = vec3(0.000000, 0.000000, 0.000000);
  o.Specular = 0.000000;
  o.Alpha = 0.000000;
  o.Gloss = 0.000000;
  SurfaceOutput o_i0;
  o_i0 = o;
  vec4 tmpvar_36;
  tmpvar_36 = texture2D (_MainTex, gl_TexCoord[0].xy);
  o_i0.Albedo = (tmpvar_36 * _Color).xyz;
  o_i0.Gloss = tmpvar_36.w;
  o_i0.Specular = _Shininess;
  vec4 tmpvar_44;
  tmpvar_44 = (textureCube (_Cube, gl_TexCoord[1].xyz) * tmpvar_36.w);
  o_i0.Emission = (tmpvar_44.xyz * _ReflectColor.xyz);
  o_i0.Alpha = (tmpvar_44.w * _ReflectColor.w);
  o = o_i0;
  vec4 tmpvar_50;
  tmpvar_50 = -(log2 (texture2DProj (_LightBuffer, gl_TexCoord[2].xyzw)));
  light = tmpvar_50;
  light.xyz = (tmpvar_50.xyz + unity_Ambient.xyz).xyz;
  vec4 c_i0;
  float tmpvar_54;
  tmpvar_54 = (light.w * o_i0.Gloss);
  c_i0.xyz = ((o_i0.Albedo * light.xyz) + ((light.xyz * _SpecColor.xyz) * tmpvar_54)).xyz;
  c_i0.w = float(vec4((o_i0.Alpha + (tmpvar_54 * _SpecColor.w))));
  col = c_i0;
  col.xyz = (c_i0.xyz + o_i0.Emission).xyz;
  gl_FragData[0] = col.xyzw;
}

