struct SurfaceOutput {
  vec3 Albedo;
  vec3 Normal;
  vec3 Emission;
  float Specular;
  float Gloss;
  float Alpha;
};
struct Input {
  vec2 uv_MainTex;
  vec2 uv_BumpMap;
  vec3 worldRefl;
  vec3 viewDir;
};
struct v2f_surf {
  vec4 pos;
  float fog;
  vec4 hip_pack0;
  vec3 viewDir;
  vec3 lightDir;
  vec4 _LightCoord;
};
varying vec4 xlv_FOG;
uniform vec4 _ReflectColor;
uniform sampler2D _ParallaxMap;
uniform float _Parallax;
uniform sampler2D _MainTex;
uniform sampler2D _LightTextureB0;
uniform sampler2D _LightTexture0;
uniform vec4 _LightColor0;
uniform samplerCube _Cube;
uniform vec4 _Color;
uniform sampler2D _BumpMap;
void main ()
{
  v2f_surf xlt_IN;
  xlt_IN.pos = vec4(0.000000, 0.000000, 0.000000, 0.000000);
  xlt_IN.fog = xlv_FOG.x;
  xlt_IN.hip_pack0 = gl_TexCoord[0].xyzw;
  xlt_IN.viewDir = gl_TexCoord[1].xyz;
  xlt_IN.lightDir = gl_TexCoord[2].xyz;
  xlt_IN._LightCoord = gl_TexCoord[3].xyzw;
  v2f_surf IN;
  IN = xlt_IN;
  vec4 c;
  vec3 lightDir;
  SurfaceOutput o;
  Input surfIN;
  surfIN.uv_MainTex = xlt_IN.hip_pack0.xy;
  surfIN.uv_BumpMap = xlt_IN.hip_pack0.zw;
  surfIN.viewDir = xlt_IN.viewDir;
  o.Albedo = vec3(0.000000, 0.000000, 0.000000);
  o.Emission = vec3(0.000000, 0.000000, 0.000000);
  o.Specular = 0.000000;
  o.Alpha = 0.000000;
  o.Gloss = 0.000000;
  Input IN_i0;
  IN_i0 = surfIN;
  SurfaceOutput o_i0;
  o_i0 = o;
  vec4 tex;
  vec4 tmpvar_75;
  tmpvar_75 = texture2D (_ParallaxMap, IN_i0.uv_BumpMap);
  vec2 __retval_i0_i0;
  float h_i0;
  vec3 v;
  h_i0 = ((tmpvar_75.w * _Parallax) - (_Parallax / 2.000000));
  vec3 tmpvar_80;
  tmpvar_80 = normalize (IN_i0.viewDir);
  v = tmpvar_80;
  v.z = float(vec3((tmpvar_80.z + 0.420000)));
  __retval_i0_i0 = (h_i0 * (v.xy / v.z));
  IN_i0.uv_MainTex = (IN_i0.uv_MainTex + __retval_i0_i0);
  IN_i0.uv_BumpMap = (IN_i0.uv_BumpMap + __retval_i0_i0);
  vec4 tmpvar_86;
  tmpvar_86 = texture2D (_MainTex, IN_i0.uv_MainTex);
  tex = tmpvar_86;
  o_i0.Albedo = (tmpvar_86 * _Color).xyz;
  vec4 tmpvar_90;
  tmpvar_90 = texture2D (_BumpMap, IN_i0.uv_BumpMap);
  vec4 normal;
  normal.xy = ((tmpvar_90.wy * 2.000000) - 1.000000).xy;
  float tmpvar_94;
  tmpvar_94 = sqrt (((1.000000 - (normal.x * normal.x)) - (normal.y * normal.y)));
  normal.z = float(vec3(tmpvar_94));
  o_i0.Normal = normal.xyz;
  vec4 tmpvar_99;
  tmpvar_99 = textureCube (_Cube, IN_i0.worldRefl);
  vec4 tmpvar_101;
  tmpvar_101 = (tmpvar_99 * tex.w);
  o_i0.Emission = (tmpvar_101.xyz * _ReflectColor.xyz);
  o_i0.Alpha = (tmpvar_101.w * _ReflectColor.w);
  o = o_i0;
  lightDir = IN.lightDir;
  vec3 tmpvar_105;
  tmpvar_105 = normalize (lightDir);
  lightDir = tmpvar_105;
  float tmpvar_107;
  vec4 LightCoord;
  LightCoord = IN._LightCoord;
  vec4 tmpvar_109;
  tmpvar_109 = texture2D (_LightTexture0, ((LightCoord.xy / LightCoord.w) + 0.500000));
  tmpvar_107 = tmpvar_109.w;
  vec3 LightCoord_i0;
  LightCoord_i0 = IN._LightCoord.xyz;
  float tmpvar_112;
  tmpvar_112 = dot (LightCoord_i0, LightCoord_i0);
  vec4 tmpvar_115;
  tmpvar_115 = texture2D (_LightTextureB0, vec2(tmpvar_112));
  SurfaceOutput s;
  s = o;
  float atten;
  atten = ((float((IN._LightCoord.z > 0.000000)) * tmpvar_107) * tmpvar_115.w);
  vec4 c_i0_i1;
  float tmpvar_118;
  tmpvar_118 = dot (s.Normal, lightDir);
  float tmpvar_119;
  tmpvar_119 = max (0.000000, tmpvar_118);
  c_i0_i1.xyz = ((s.Albedo * _LightColor0.xyz) * ((tmpvar_119 * atten) * 2.000000)).xyz;
  c_i0_i1.w = float(vec4(s.Alpha));
  c = c_i0_i1;
  c.w = float(vec4(0.000000, 0.000000, 0.000000, 0.000000));
  gl_FragData[0] = c.xyzw;
}

