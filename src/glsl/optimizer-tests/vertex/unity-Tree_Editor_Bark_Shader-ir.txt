struct appdata_full {
  vec4 vertex;
  vec4 tangent;
  vec3 normal;
  vec4 texcoord;
  vec4 texcoord1;
  vec4 color;
};
struct v2f_surf {
  vec4 pos;
  float fog;
  vec2 hip_pack0;
  vec4 lop_color;
  vec3 lightDir;
  vec3 viewDir;
};
uniform vec4 _Color;
uniform vec4 _MainTex_ST;
uniform mat4 _Object2World;
uniform vec4 _Scale;
uniform float _SquashAmount;
uniform vec4 _SquashPlaneNormal;
uniform float _TimeX;
uniform vec4 _Wind;
uniform mat4 _World2Object;
uniform vec3 _WorldSpaceCameraPos;
uniform vec4 _WorldSpaceLightPos0;
uniform vec4 unity_Scale;
vec4 Squash (
  in vec4 pos
);

vec4 Squash (
  in vec4 pos
)
{
  vec3 projectedVertex;
  vec3 planePoint;
  vec3 planeNormal;
  vec3 tmpvar_1;
  tmpvar_1 = pos.xyz;
  projectedVertex = tmpvar_1;
  vec3 tmpvar_2;
  tmpvar_2.x = float(vec3(0.000000));
  tmpvar_2.y = float(vec3(_SquashPlaneNormal.w));
  tmpvar_2.z = float(vec3(0.000000));
  vec3 tmpvar_3;
  tmpvar_3 = tmpvar_2;
  planePoint = tmpvar_3;
  vec3 tmpvar_4;
  tmpvar_4 = _SquashPlaneNormal.xyz;
  planeNormal = tmpvar_4;
  vec3 tmpvar_5;
  tmpvar_5 = pos.xyz;
  float tmpvar_6;
  tmpvar_6 = dot (planeNormal, (planePoint - tmpvar_5));
  vec3 tmpvar_7;
  tmpvar_7 = (projectedVertex + (tmpvar_6 * planeNormal));
  projectedVertex = tmpvar_7;
  vec3 tmpvar_8;
  tmpvar_8 = vec3(_SquashAmount);
  vec3 tmpvar_9;
  tmpvar_9 = mix (projectedVertex, pos.xyz, tmpvar_8);
  vec4 tmpvar_10;
  tmpvar_10.xyz = vec3(tmpvar_9.xyz);
  tmpvar_10.w = float(vec4(1.000000));
  vec4 tmpvar_11;
  tmpvar_11 = tmpvar_10;
  pos = tmpvar_11;
  return pos;
}

vec4 TriangleWave (
  in vec4 x
);

vec4 TriangleWave (
  in vec4 x
)
{
  vec4 tmpvar_1;
  tmpvar_1 = fract ((x + 0.500000));
  vec4 tmpvar_2;
  tmpvar_2 = abs (((tmpvar_1 * 2.000000) - 1.000000));
  return tmpvar_2;
}

vec4 SmoothCurve (
  in vec4 x
);

vec4 SmoothCurve (
  in vec4 x
)
{
  return ((x * x) * (3.000000 - (2.000000 * x)));
}

vec4 SmoothTriangleWave (
  in vec4 x
);

vec4 SmoothTriangleWave (
  in vec4 x
)
{
  vec4 tmpvar_1;
  tmpvar_1 = TriangleWave (x);
  vec4 tmpvar_2;
  tmpvar_2 = SmoothCurve (tmpvar_1);
  return tmpvar_2;
}

vec4 AnimateVertex (
  in vec4 pos,
  in vec3 normal,
  in vec4 animParams
);

vec4 AnimateVertex (
  in vec4 pos,
  in vec3 normal,
  in vec4 animParams
)
{
  float fDetailAmp;
  float tmpvar_1;
  tmpvar_1 = 0.100000;
  fDetailAmp = tmpvar_1;
  float fBranchAmp;
  float tmpvar_2;
  tmpvar_2 = 0.300000;
  fBranchAmp = tmpvar_2;
  float fObjPhase;
  float fBranchPhase;
  float fVtxPhase;
  vec2 vWavesIn;
  vec4 vWaves;
  vec2 vWavesSum;
  vec3 bend;
  float tmpvar_3;
  tmpvar_3 = dot (_Object2World[3].xyz, vec3(1.000000, 1.000000, 1.000000));
  float tmpvar_4;
  tmpvar_4 = tmpvar_3;
  fObjPhase = tmpvar_4;
  float tmpvar_5;
  tmpvar_5 = (fObjPhase + animParams.x);
  fBranchPhase = tmpvar_5;
  vec3 tmpvar_6;
  tmpvar_6 = vec3((animParams.y + fBranchPhase));
  float tmpvar_7;
  tmpvar_7 = dot (pos.xyz, tmpvar_6);
  float tmpvar_8;
  tmpvar_8 = tmpvar_7;
  fVtxPhase = tmpvar_8;
  vec2 tmpvar_9;
  tmpvar_9.x = float(vec2(fVtxPhase));
  tmpvar_9.y = float(vec2(fBranchPhase));
  vec2 tmpvar_10;
  tmpvar_10 = (_TimeX + tmpvar_9);
  vWavesIn = tmpvar_10;
  vec4 tmpvar_11;
  tmpvar_11 = fract ((vWavesIn.xxyy * vec4(1.975000, 0.793000, 0.375000, 0.193000)));
  vec4 tmpvar_12;
  tmpvar_12 = ((tmpvar_11 * 2.000000) - 1.000000);
  vWaves = tmpvar_12;
  vec4 tmpvar_13;
  tmpvar_13 = SmoothTriangleWave (vWaves);
  vec4 tmpvar_14;
  tmpvar_14 = tmpvar_13;
  vWaves = tmpvar_14;
  vec2 tmpvar_15;
  tmpvar_15 = (vWaves.xz + vWaves.yw);
  vWavesSum = tmpvar_15;
  vec3 tmpvar_16;
  tmpvar_16 = ((animParams.y * fDetailAmp) * normal.xyz);
  bend = tmpvar_16;
  float tmpvar_17;
  tmpvar_17 = (animParams.w * fBranchAmp);
  bend.y = float(vec2(tmpvar_17));
  vec3 tmpvar_18;
  tmpvar_18 = (pos.xyz + (((vWavesSum.xyx * bend) + ((_Wind.xyz * vWavesSum.y) * animParams.w)) * _Wind.w));
  pos.xyz = tmpvar_18.xyz;
  vec3 tmpvar_19;
  tmpvar_19 = (pos.xyz + (animParams.z * _Wind.xyz));
  pos.xyz = tmpvar_19.xyz;
  return pos;
}

void TreeVertBark (
  inout appdata_full v
);

void TreeVertBark (
  inout appdata_full v
)
{
  vec3 tmpvar_1;
  tmpvar_1 = (v.vertex.xyz * _Scale.xyz);
  v.vertex.xyz = tmpvar_1.xyz;
  vec4 tmpvar_2;
  tmpvar_2.xy = vec2(v.color.xy.xy);
  tmpvar_2.zw = vec2(v.texcoord1.xy.xy);
  vec4 tmpvar_3;
  tmpvar_3 = AnimateVertex (v.vertex, v.normal, tmpvar_2);
  vec4 tmpvar_4;
  tmpvar_4 = tmpvar_3;
  v.vertex = tmpvar_4;
  vec4 tmpvar_5;
  tmpvar_5 = Squash (v.vertex);
  vec4 tmpvar_6;
  tmpvar_6 = tmpvar_5;
  v.vertex = tmpvar_6;
  vec4 tmpvar_7;
  tmpvar_7.xyz = vec3((v.color.w * _Color.xyz).xyz);
  tmpvar_7.w = float(vec4(_Color.w));
  vec4 tmpvar_8;
  tmpvar_8 = tmpvar_7;
  v.color = tmpvar_8;
  vec3 tmpvar_9;
  tmpvar_9 = normalize (v.normal);
  vec3 tmpvar_10;
  tmpvar_10 = tmpvar_9;
  v.normal = tmpvar_10;
  vec3 tmpvar_11;
  tmpvar_11 = normalize (v.tangent.xyz);
  vec3 tmpvar_12;
  tmpvar_12 = tmpvar_11;
  v.tangent.xyz = tmpvar_12.xyz;
}

void PositionFog (
  in vec4 v,
  out vec4 pos,
  out float fog
);

void PositionFog (
  in vec4 v,
  out vec4 pos,
  out float fog
)
{
  vec4 tmpvar_1;
  tmpvar_1 = (gl_ModelViewProjectionMatrix * v);
  pos = tmpvar_1;
  float tmpvar_2;
  tmpvar_2 = pos.z;
  fog = tmpvar_2;
}

vec3 ObjSpaceViewDir (
  in vec4 v
);

vec3 ObjSpaceViewDir (
  in vec4 v
)
{
  vec3 objSpaceCameraPos;
  vec4 tmpvar_1;
  tmpvar_1.xyz = vec3(_WorldSpaceCameraPos.xyz.xyz);
  tmpvar_1.w = float(vec4(1.000000));
  vec3 tmpvar_2;
  tmpvar_2 = ((_World2Object * tmpvar_1).xyz * unity_Scale.w);
  objSpaceCameraPos = tmpvar_2;
  return (objSpaceCameraPos - v.xyz);
}

vec3 ObjSpaceLightDir (
  in vec4 v
);

vec3 ObjSpaceLightDir (
  in vec4 v
)
{
  vec3 objSpaceLightPos;
  vec3 tmpvar_1;
  tmpvar_1 = (_World2Object * _WorldSpaceLightPos0).xyz;
  objSpaceLightPos = tmpvar_1;
  return objSpaceLightPos.xyz;
}

v2f_surf vert_surf (
  in appdata_full v
);

v2f_surf vert_surf (
  in appdata_full v
)
{
  v2f_surf o;
  vec3 binormal;
  mat3 rotation;
  TreeVertBark (v);
  PositionFog (v.vertex, o.pos, o.fog);
  vec2 tmpvar_1;
  tmpvar_1 = ((v.texcoord.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  o.hip_pack0 = tmpvar_1.xy;
  vec4 tmpvar_2;
  tmpvar_2 = v.color;
  o.lop_color = tmpvar_2;
  vec3 tmpvar_3;
  tmpvar_3 = cross (v.normal, v.tangent.xyz);
  vec3 tmpvar_4;
  tmpvar_4 = (tmpvar_3 * v.tangent.w);
  binormal = tmpvar_4;
  mat3 tmpvar_5;
  float tmpvar_6;
  tmpvar_6 = v.tangent.x;
  tmpvar_5[0].x = float(vec3(tmpvar_6));
  float tmpvar_7;
  tmpvar_7 = binormal.x;
  tmpvar_5[0].y = float(vec3(tmpvar_7));
  float tmpvar_8;
  tmpvar_8 = v.normal.x;
  tmpvar_5[0].z = float(vec3(tmpvar_8));
  float tmpvar_9;
  tmpvar_9 = v.tangent.y;
  tmpvar_5[1].x = float(vec3(tmpvar_9));
  float tmpvar_10;
  tmpvar_10 = binormal.y;
  tmpvar_5[1].y = float(vec3(tmpvar_10));
  float tmpvar_11;
  tmpvar_11 = v.normal.y;
  tmpvar_5[1].z = float(vec3(tmpvar_11));
  float tmpvar_12;
  tmpvar_12 = v.tangent.z;
  tmpvar_5[2].x = float(vec3(tmpvar_12));
  float tmpvar_13;
  tmpvar_13 = binormal.z;
  tmpvar_5[2].y = float(vec3(tmpvar_13));
  float tmpvar_14;
  tmpvar_14 = v.normal.z;
  tmpvar_5[2].z = float(vec3(tmpvar_14));
  mat3 tmpvar_15;
  tmpvar_15 = (tmpvar_5);
  rotation = (tmpvar_15);
  vec3 tmpvar_16;
  tmpvar_16 = ObjSpaceLightDir (v.vertex);
  vec3 tmpvar_17;
  tmpvar_17 = (rotation * tmpvar_16);
  o.lightDir = tmpvar_17;
  vec3 tmpvar_18;
  tmpvar_18 = ObjSpaceViewDir (v.vertex);
  vec3 tmpvar_19;
  tmpvar_19 = (rotation * tmpvar_18);
  o.viewDir = tmpvar_19;
  return o;
}

attribute vec4 TANGENT;
varying vec4 xlv_FOG;
void main ()
{
  v2f_surf xl_retval;
  appdata_full xlt_v;
  vec4 tmpvar_1;
  tmpvar_1 = gl_Vertex.xyzw;
  vec4 tmpvar_2;
  tmpvar_2 = tmpvar_1;
  xlt_v.vertex = tmpvar_2;
  vec4 tmpvar_3;
  tmpvar_3 = TANGENT.xyzw;
  vec4 tmpvar_4;
  tmpvar_4 = tmpvar_3;
  xlt_v.tangent = tmpvar_4;
  vec3 tmpvar_5;
  tmpvar_5 = gl_Normal.xyz;
  vec3 tmpvar_6;
  tmpvar_6 = tmpvar_5;
  xlt_v.normal = tmpvar_6;
  vec4 tmpvar_7;
  tmpvar_7 = gl_MultiTexCoord0.xyzw;
  vec4 tmpvar_8;
  tmpvar_8 = tmpvar_7;
  xlt_v.texcoord = tmpvar_8;
  vec4 tmpvar_9;
  tmpvar_9 = gl_MultiTexCoord1.xyzw;
  vec4 tmpvar_10;
  tmpvar_10 = tmpvar_9;
  xlt_v.texcoord1 = tmpvar_10;
  vec4 tmpvar_11;
  tmpvar_11 = gl_Color.xyzw;
  vec4 tmpvar_12;
  tmpvar_12 = tmpvar_11;
  xlt_v.color = tmpvar_12;
  v2f_surf tmpvar_13;
  tmpvar_13 = vert_surf (xlt_v);
  v2f_surf tmpvar_14;
  tmpvar_14 = tmpvar_13;
  xl_retval = tmpvar_14;
  vec4 tmpvar_15;
  tmpvar_15 = xl_retval.pos.xyzw;
  vec4 tmpvar_16;
  tmpvar_16 = tmpvar_15;
  gl_Position = tmpvar_16;
  vec4 tmpvar_17;
  tmpvar_17.x = float(vec4(xl_retval.fog));
  tmpvar_17.y = float(vec4(0.000000));
  tmpvar_17.z = float(vec4(0.000000));
  tmpvar_17.w = float(vec4(0.000000));
  vec4 tmpvar_18;
  tmpvar_18 = tmpvar_17;
  xlv_FOG = tmpvar_18;
  vec4 tmpvar_19;
  tmpvar_19.xy = vec2(xl_retval.hip_pack0.xy);
  tmpvar_19.z = float(vec4(0.000000));
  tmpvar_19.w = float(vec4(0.000000));
  vec4 tmpvar_20;
  tmpvar_20 = tmpvar_19;
  gl_TexCoord[0] = tmpvar_20;
  vec4 tmpvar_21;
  tmpvar_21 = xl_retval.lop_color.xyzw;
  vec4 tmpvar_22;
  tmpvar_22 = tmpvar_21;
  gl_FrontColor = tmpvar_22;
  vec4 tmpvar_23;
  tmpvar_23.xyz = vec3(xl_retval.lightDir.xyz);
  tmpvar_23.w = float(vec4(0.000000));
  vec4 tmpvar_24;
  tmpvar_24 = tmpvar_23;
  gl_TexCoord[1] = tmpvar_24;
  vec4 tmpvar_25;
  tmpvar_25.xyz = vec3(xl_retval.viewDir.xyz);
  tmpvar_25.w = float(vec4(0.000000));
  vec4 tmpvar_26;
  tmpvar_26 = tmpvar_25;
  gl_TexCoord[2] = tmpvar_26;
}

