uniform vec4 unity_LightShadowBias;
uniform vec4 _Wind;
uniform float _TimeX;
uniform vec4 _SquashPlaneNormal;
uniform float _SquashAmount;
uniform vec4 _Scale;
uniform mat4 _Object2World;
void main ()
{
  vec4 tmpvar_1;
  vec4 tmpvar_2;
  tmpvar_2 = gl_Vertex;
  tmpvar_2.xyz = (gl_Vertex.xyz * _Scale.xyz);
  vec4 tmpvar_3;
  tmpvar_3.xy = gl_Color.xy;
  tmpvar_3.zw = gl_MultiTexCoord1.xy;
  vec4 pos;
  pos = tmpvar_2;
  vec3 bend;
  float tmpvar_4;
  tmpvar_4 = (dot (_Object2World[3].xyz, vec3(1.0, 1.0, 1.0)) + tmpvar_3.x);
  vec2 tmpvar_5;
  tmpvar_5.x = dot (tmpvar_2.xyz, vec3((tmpvar_3.y + tmpvar_4)));
  tmpvar_5.y = tmpvar_4;
  vec4 tmpvar_6;
  tmpvar_6 = abs (((fract ((((fract (((_TimeX + tmpvar_5).xxyy * vec4(1.975, 0.793, 0.375, 0.193))) * 2.0) - 1.0) + 0.5)) * 2.0) - 1.0));
  vec4 tmpvar_7;
  tmpvar_7 = ((tmpvar_6 * tmpvar_6) * (3.0 - (2.0 * tmpvar_6)));
  vec2 tmpvar_8;
  tmpvar_8 = (tmpvar_7.xz + tmpvar_7.yw);
  bend = ((tmpvar_3.y * 0.1) * gl_Normal);
  bend.y = (tmpvar_3.w * 0.3);
  pos.xyz = (tmpvar_2.xyz + (((tmpvar_8.xyx * bend) + ((_Wind.xyz * tmpvar_8.y) * tmpvar_3.w)) * _Wind.w));
  pos.xyz = (pos.xyz + (tmpvar_3.z * _Wind.xyz));
  vec3 tmpvar_9;
  tmpvar_9.xz = vec2(0.0, 0.0);
  tmpvar_9.y = _SquashPlaneNormal.w;
  vec3 tmpvar_10;
  tmpvar_10 = _SquashPlaneNormal.xyz;
  vec4 tmpvar_11;
  tmpvar_11.w = 1.0;
  tmpvar_11.xyz = mix ((pos.xyz + (dot (tmpvar_10, (tmpvar_9 - pos.xyz)) * tmpvar_10)), pos.xyz, vec3(_SquashAmount));
  tmpvar_2 = tmpvar_11;
  vec4 tmpvar_12;
  tmpvar_12 = (gl_ModelViewProjectionMatrix * tmpvar_11);
  tmpvar_1 = tmpvar_12;
  tmpvar_1.z = (tmpvar_12.z + unity_LightShadowBias.x);
  if ((tmpvar_1.z < -(tmpvar_12.w))) {
    tmpvar_1.z = -(tmpvar_12.w);
  };
  gl_Position = tmpvar_1;
}

