struct appdata_full {
  vec4 vertex;
  vec4 tangent;
  vec3 normal;
  vec4 texcoord;
  vec4 texcoord1;
  vec4 color;
};
attribute vec4 TANGENT;
uniform vec4 unity_LightShadowBias;
uniform vec4 _Wind;
uniform float _TimeX;
uniform vec4 _SquashPlaneNormal;
uniform float _SquashAmount;
uniform vec4 _Scale;
uniform mat4 _Object2World;
uniform vec4 _Color;
void main ()
{
  appdata_full xlt_v;
  xlt_v.vertex = gl_Vertex.xyzw;
  xlt_v.tangent = TANGENT.xyzw;
  xlt_v.normal = gl_Normal.xyz;
  xlt_v.texcoord = gl_MultiTexCoord0.xyzw;
  xlt_v.texcoord1 = gl_MultiTexCoord1.xyzw;
  xlt_v.color = gl_Color.xyzw;
  vec4 tmpvar_177;
  appdata_full v_i0;
  v_i0 = xlt_v;
  v_i0.vertex.xyz = (xlt_v.vertex.xyz * _Scale.xyz).xyz;
  vec4 tmpvar_120;
  tmpvar_120.xy = vec2(v_i0.color.xy);
  tmpvar_120.zw = vec2(v_i0.texcoord1.xy);
  vec4 pos;
  pos = v_i0.vertex;
  vec3 normal;
  normal = v_i0.normal;
  vec4 animParams;
  animParams = tmpvar_120;
  vec3 bend;
  float fBranchPhase;
  float tmpvar_125;
  tmpvar_125 = dot (_Object2World[3].xyz, vec3(1.000000, 1.000000, 1.000000));
  float tmpvar_127;
  tmpvar_127 = (tmpvar_125 + animParams.x);
  fBranchPhase = tmpvar_127;
  float tmpvar_129;
  tmpvar_129 = dot (pos.xyz, vec3((animParams.y + tmpvar_127)));
  vec2 tmpvar_131;
  tmpvar_131.x = float(vec2(tmpvar_129));
  tmpvar_131.y = float(vec2(fBranchPhase));
  vec4 tmpvar_133;
  tmpvar_133 = fract (((_TimeX + tmpvar_131).xxyy * vec4(1.975000, 0.793000, 0.375000, 0.193000)));
  vec4 tmpvar_139;
  tmpvar_139 = fract ((((tmpvar_133 * 2.000000) - 1.000000) + 0.500000));
  vec4 tmpvar_140;
  tmpvar_140 = abs (((tmpvar_139 * 2.000000) - 1.000000));
  vec4 __retval_i0;
  __retval_i0 = ((tmpvar_140 * tmpvar_140) * (3.000000 - (2.000000 * tmpvar_140)));
  vec2 tmpvar_144;
  tmpvar_144 = (__retval_i0.xz + __retval_i0.yw);
  bend = ((animParams.y * 0.100000) * normal.xyz);
  bend.y = float(vec2((animParams.w * 0.300000)));
  pos.xyz = (pos.xyz + (((tmpvar_144.xyx * bend) + ((_Wind.xyz * tmpvar_144.y) * animParams.w)) * _Wind.w)).xyz;
  pos.xyz = (pos.xyz + (animParams.z * _Wind.xyz)).xyz;
  v_i0.vertex = pos;
  vec4 pos_i0;
  pos_i0 = v_i0.vertex;
  vec3 planeNormal;
  vec3 projectedVertex;
  projectedVertex = pos_i0.xyz;
  vec3 tmpvar_153;
  tmpvar_153.x = float(vec3(0.000000, 0.000000, 0.000000));
  tmpvar_153.y = float(_SquashPlaneNormal.w);
  tmpvar_153.z = float(vec3(0.000000, 0.000000, 0.000000));
  vec3 tmpvar_155;
  tmpvar_155 = _SquashPlaneNormal.xyz;
  planeNormal = tmpvar_155;
  float tmpvar_157;
  tmpvar_157 = dot (tmpvar_155, (tmpvar_153 - pos_i0.xyz));
  vec3 tmpvar_158;
  tmpvar_158 = (projectedVertex + (tmpvar_157 * planeNormal));
  projectedVertex = tmpvar_158;
  vec3 tmpvar_160;
  tmpvar_160 = mix (tmpvar_158, pos_i0.xyz, vec3(_SquashAmount));
  vec4 tmpvar_161;
  tmpvar_161.xyz = vec3(tmpvar_160.xyz);
  tmpvar_161.w = float(vec4(1.000000, 1.000000, 1.000000, 1.000000));
  pos_i0 = tmpvar_161;
  v_i0.vertex = tmpvar_161;
  vec4 tmpvar_164;
  tmpvar_164.xyz = vec3((v_i0.color.w * _Color.xyz).xyz);
  tmpvar_164.w = float(_Color.w);
  v_i0.color = tmpvar_164;
  vec3 tmpvar_166;
  tmpvar_166 = normalize (v_i0.normal);
  v_i0.normal = tmpvar_166;
  vec3 tmpvar_168;
  tmpvar_168 = normalize (v_i0.tangent.xyz);
  v_i0.tangent.xyz = tmpvar_168.xyz;
  tmpvar_177 = (gl_ModelViewProjectionMatrix * v_i0.vertex);
  tmpvar_177.z = float(vec3((tmpvar_177.z + unity_LightShadowBias.x)));
  if ((tmpvar_177.z < -(tmpvar_177.w))) {
    tmpvar_177.z = float(vec3(-(tmpvar_177.w)));
  };
  gl_Position = tmpvar_177.xyzw;
}

