varying vec4 xlv_FOG;
attribute vec4 TANGENT;
uniform vec3 _TerrainTreeLightDirections[4];
uniform vec4 _TerrainTreeLightColors[4];
uniform mat4 _TerrainEngineBendTree;
uniform vec4 _SquashPlaneNormal;
uniform float _SquashAmount;
uniform vec4 _Scale;
uniform vec4 _Color;
uniform float _AO;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = gl_Normal;
  int i;
  vec4 lightColor;
  vec4 lightDir;
  vec4 tmpvar_2;
  i = 0;
  vec4 pos;
  pos = gl_Vertex;
  pos.xyz = (gl_Vertex.xyz * _Scale.xyz);
  vec4 tmpvar_3;
  tmpvar_3.w = 0.0;
  tmpvar_3.xyz = pos.xyz;
  pos.xyz = mix (pos.xyz, (_TerrainEngineBendTree * tmpvar_3).xyz, gl_Color.www);
  vec3 tmpvar_4;
  tmpvar_4.xz = vec2(0.0, 0.0);
  tmpvar_4.y = _SquashPlaneNormal.w;
  vec3 tmpvar_5;
  tmpvar_5 = _SquashPlaneNormal.xyz;
  vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = mix ((pos.xyz + (dot (tmpvar_5, (tmpvar_4 - pos.xyz)) * tmpvar_5)), pos.xyz, vec3(_SquashAmount));
  pos = tmpvar_6;
  vec4 tmpvar_7;
  tmpvar_7 = (gl_ModelViewProjectionMatrix * tmpvar_6);
  float tmpvar_8;
  tmpvar_8 = tmpvar_7.z;
  lightDir.w = _AO;
  lightColor = gl_LightModel.ambient;
  while (true) {
    if ((i >= 4)) {
      break;
    };
    lightDir.xyz = _TerrainTreeLightDirections[i];
    lightColor = (lightColor + (_TerrainTreeLightColors[i] * max (0.0, dot (lightDir.xyz, tmpvar_1))));
    i = (i + 1);
  };
  lightColor.w = 1.0;
  tmpvar_2 = (lightColor * _Color);
  tmpvar_2.w = 1.0;
  gl_Position = tmpvar_7;
  vec4 tmpvar_9;
  tmpvar_9.yzw = vec3(0.0, 0.0, 0.0);
  tmpvar_9.x = tmpvar_8;
  xlv_FOG = tmpvar_9;
  gl_TexCoord[0] = gl_MultiTexCoord0;
  gl_FrontColor = tmpvar_2;
}

