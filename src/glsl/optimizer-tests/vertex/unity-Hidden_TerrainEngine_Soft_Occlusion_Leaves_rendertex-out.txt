struct v2f {
  vec4 pos;
  float fog;
  vec4 uv;
  vec4 color;
};
struct appdata_tree {
  vec4 vertex;
  vec4 tangent;
  vec3 normal;
  vec4 color;
  vec4 texcoord;
};
varying vec4 xlv_FOG;
attribute vec4 TANGENT;
uniform vec3 _TerrainTreeLightDirections[4];
uniform vec4 _TerrainTreeLightColors[4];
uniform mat4 _TerrainEngineBendTree;
uniform vec4 _SquashPlaneNormal;
uniform float _SquashAmount;
uniform vec4 _Scale;
uniform vec4 _Color;
uniform float _AO;
void main ()
{
  appdata_tree xlt_v;
  xlt_v.vertex = gl_Vertex.xyzw;
  xlt_v.tangent = TANGENT.xyzw;
  xlt_v.normal = gl_Normal.xyz;
  xlt_v.color = gl_Color.xyzw;
  xlt_v.texcoord = gl_MultiTexCoord0.xyzw;
  appdata_tree v;
  v = xlt_v;
  float occ;
  int i;
  vec4 lightColor;
  vec4 lightDir;
  v2f o;
  i = 0;
  vec4 pos;
  pos = xlt_v.vertex;
  pos.xyz = (pos.xyz * _Scale.xyz).xyz;
  vec4 tmpvar_57;
  tmpvar_57.xyz = vec3(pos.xyz);
  tmpvar_57.w = float(vec4(0.000000, 0.000000, 0.000000, 0.000000));
  vec3 tmpvar_60;
  tmpvar_60 = mix (pos.xyz, (_TerrainEngineBendTree * tmpvar_57).xyz, xlt_v.color.www);
  pos.xyz = tmpvar_60.xyz;
  vec4 pos_i0;
  pos_i0 = pos;
  vec3 planeNormal;
  vec3 projectedVertex;
  projectedVertex = pos.xyz;
  vec3 tmpvar_65;
  tmpvar_65.x = float(vec3(0.000000, 0.000000, 0.000000));
  tmpvar_65.y = float(_SquashPlaneNormal.w);
  tmpvar_65.z = float(vec3(0.000000, 0.000000, 0.000000));
  planeNormal = _SquashPlaneNormal.xyz;
  float tmpvar_69;
  tmpvar_69 = dot (planeNormal, (tmpvar_65 - pos.xyz));
  projectedVertex = (projectedVertex + (tmpvar_69 * planeNormal));
  vec3 tmpvar_72;
  tmpvar_72 = mix (projectedVertex, pos_i0.xyz, vec3(_SquashAmount));
  vec4 tmpvar_73;
  tmpvar_73.xyz = vec3(tmpvar_72.xyz);
  tmpvar_73.w = float(vec4(1.000000, 1.000000, 1.000000, 1.000000));
  pos_i0 = tmpvar_73;
  pos = tmpvar_73;
  v.vertex = tmpvar_73;
  o.pos = (gl_ModelViewProjectionMatrix * v.vertex);
  o.fog = o.pos.z;
  o.uv = v.texcoord;
  lightDir.w = float(vec4(_AO));
  lightColor = gl_LightModel.ambient;
  while (true) {
    if (!((i < 4))) {
      break;
    };
    lightDir.xyz = _TerrainTreeLightDirections[i].xyz;
    float tmpvar_84;
    tmpvar_84 = dot (lightDir.xyz, v.normal);
    occ = tmpvar_84;
    float tmpvar_86;
    tmpvar_86 = max (0.000000, occ);
    occ = tmpvar_86;
    lightColor = (lightColor + (_TerrainTreeLightColors[i] * tmpvar_86));
    i = (i + 1);
  };
  lightColor.w = float(vec4(1.000000, 1.000000, 1.000000, 1.000000));
  o.color = (lightColor * _Color);
  o.color.w = float(vec4(1.000000, 1.000000, 1.000000, 1.000000));
  gl_Position = o.pos.xyzw;
  vec4 tmpvar_15;
  tmpvar_15.x = float(vec4(o.fog));
  tmpvar_15.y = float(vec4(0.000000, 0.000000, 0.000000, 0.000000));
  tmpvar_15.z = float(vec4(0.000000, 0.000000, 0.000000, 0.000000));
  tmpvar_15.w = float(vec4(0.000000, 0.000000, 0.000000, 0.000000));
  xlv_FOG = tmpvar_15;
  gl_TexCoord[0] = o.uv.xyzw;
  gl_FrontColor = o.color.xyzw;
}

