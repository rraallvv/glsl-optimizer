varying vec4 xlv_FOG;
attribute vec4 TANGENT;
uniform vec3 _TerrainTreeLightDirections[4];
uniform vec4 _TerrainTreeLightColors[4];
uniform mat4 _TerrainEngineBendTree;
uniform vec4 _SquashPlaneNormal;
uniform float _SquashAmount;
uniform vec4 _Scale;
uniform vec4 _Color;
uniform float _AO;
void main ()
{
  vec4 tmpvar_1;
  tmpvar_1 = gl_Vertex.xyzw;
  vec4 tmpvar_2;
  tmpvar_2 = gl_MultiTexCoord0.xyzw;
  vec3 tmpvar_3;
  tmpvar_3 = gl_Normal.xyz;
  int i;
  vec4 lightColor;
  vec4 lightDir;
  vec4 tmpvar_4;
  i = 0;
  vec4 pos;
  pos = tmpvar_1;
  pos.xyz = (tmpvar_1.xyz * _Scale.xyz).xyz;
  vec4 tmpvar_5;
  tmpvar_5.xyz = pos.xyz;
  tmpvar_5.w = 0.0;
  pos.xyz = mix (pos.xyz, (_TerrainEngineBendTree * tmpvar_5).xyz, gl_Color.www).xyz;
  vec3 tmpvar_6;
  tmpvar_6.x = 0.0;
  tmpvar_6.y = _SquashPlaneNormal.w;
  tmpvar_6.z = 0.0;
  vec3 tmpvar_7;
  tmpvar_7 = _SquashPlaneNormal.xyz;
  vec4 tmpvar_8;
  tmpvar_8.xyz = mix ((pos.xyz + (dot (tmpvar_7, (tmpvar_6 - pos.xyz)) * tmpvar_7)), pos.xyz, vec3(_SquashAmount)).xyz;
  tmpvar_8.w = 1.0;
  pos = tmpvar_8;
  vec4 tmpvar_9;
  tmpvar_9 = (gl_ModelViewProjectionMatrix * tmpvar_8);
  float tmpvar_10;
  tmpvar_10 = tmpvar_9.z;
  lightDir.w = (vec4(_AO)).w;
  lightColor = gl_LightModel.ambient;
  while (true) {
    if ((i >= 4)) {
      break;
    };
    lightDir.xyz = _TerrainTreeLightDirections[i].xyz;
    lightColor = (lightColor + (_TerrainTreeLightColors[i] * max (0.0, dot (lightDir.xyz, tmpvar_3))));
    i = (i + 1);
  };
  lightColor.w = 1.0;
  tmpvar_4 = (lightColor * _Color);
  tmpvar_4.w = 1.0;
  gl_Position = tmpvar_9.xyzw;
  vec4 tmpvar_11;
  tmpvar_11.x = (vec4(tmpvar_10)).x;
  tmpvar_11.y = 0.0;
  tmpvar_11.z = 0.0;
  tmpvar_11.w = 0.0;
  xlv_FOG = tmpvar_11;
  gl_TexCoord[0] = tmpvar_2.xyzw;
  gl_FrontColor = tmpvar_4.xyzw;
}

