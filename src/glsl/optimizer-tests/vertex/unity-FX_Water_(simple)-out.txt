struct v2f {
  vec4 pos;
  float fog;
  vec2 bumpuv[2];
  vec3 viewDir;
};
struct appdata {
  vec4 vertex;
  vec3 normal;
};
uniform vec4 _WaveOffset;
uniform float _WaveScale;
uniform mat4 _World2Object;
uniform vec3 _WorldSpaceCameraPos;
uniform vec4 unity_Scale;
varying vec4 xlv_FOG;
void main ()
{
  appdata xlt_v;
  xlt_v.vertex = gl_Vertex.xyzw;
  xlt_v.normal = gl_Normal.xyz;
  v2f o;
  vec4 temp;
  vec4 tmpvar_23;
  tmpvar_23 = (gl_ModelViewProjectionMatrix * xlt_v.vertex);
  o.pos = tmpvar_23;
  o.fog = tmpvar_23.z;
  temp = ((xlt_v.vertex.xzxz * _WaveScale) + _WaveOffset).xyzw;
  o.bumpuv[0] = (temp.xy * vec2 (0.400000, 0.450000));
  o.bumpuv[1] = temp.wz;
  vec4 tmpvar_30;
  tmpvar_30.xyz = vec3(_WorldSpaceCameraPos.xyzx);
  tmpvar_30.w = float(vec4 (1.000000, 1.000000, 1.000000, 1.000000));
  vec3 tmpvar_32;
  tmpvar_32 = normalize ((((_World2Object * tmpvar_30).xyz * unity_Scale.w) - xlt_v.vertex.xyz));
  o.viewDir = tmpvar_32.xzy;
  gl_Position = o.pos.xyzw;
  vec4 tmpvar_9;
  tmpvar_9.x = float(vec4(o.fog));
  tmpvar_9.y = float(vec4 (0.000000, 0.000000, 0.000000, 0.000000));
  tmpvar_9.z = float(vec4 (0.000000, 0.000000, 0.000000, 0.000000));
  tmpvar_9.w = float(vec4 (0.000000, 0.000000, 0.000000, 0.000000));
  xlv_FOG = tmpvar_9;
  vec4 tmpvar_11;
  tmpvar_11.xy = vec2(o.bumpuv[0].xyxx);
  tmpvar_11.z = float(vec4 (0.000000, 0.000000, 0.000000, 0.000000));
  tmpvar_11.w = float(vec4 (0.000000, 0.000000, 0.000000, 0.000000));
  gl_TexCoord[0] = tmpvar_11;
  vec4 tmpvar_13;
  tmpvar_13.xy = vec2(o.bumpuv[1].xyxx);
  tmpvar_13.z = float(vec4 (0.000000, 0.000000, 0.000000, 0.000000));
  tmpvar_13.w = float(vec4 (0.000000, 0.000000, 0.000000, 0.000000));
  gl_TexCoord[1] = tmpvar_13;
  vec4 tmpvar_15;
  tmpvar_15.xyz = vec3(o.viewDir.xyzx);
  tmpvar_15.w = float(vec4 (0.000000, 0.000000, 0.000000, 0.000000));
  gl_TexCoord[2] = tmpvar_15;
}

