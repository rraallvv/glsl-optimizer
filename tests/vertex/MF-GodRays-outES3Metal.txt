#include <metal_stdlib>
using namespace metal;
struct xlatMtlShaderInput {
  float4 _inVertex [[attribute(0)]];
  half3 _inNormal [[attribute(1)]];
  float4 _uv0 [[attribute(2)]];
  float4 _uv1 [[attribute(3)]];
  half4 _color [[attribute(4)]];
};
struct xlatMtlShaderOutput {
  float4 xlv_SV_POSITION;
  float2 xlv_TEXCOORD0;
  half4 xlv_TEXCOORD1;
};
struct xlatMtlShaderUniform {
  float _Bias;
  float _BlinkingTimeOffsScale;
  float4 _Color;
  float _FadeOutDistFar;
  float _FadeOutDistNear;
  float _MaxGrowSize;
  float _Multiplier;
  float _NoiseAmount;
  float _SizeGrowEndDist;
  float _SizeGrowStartDist;
  float4 _Time;
  float _TimeOffDuration;
  float _TimeOnDuration;
  float _VerticalBillboarding;
  float4x4 _World2Object;
  float3 _WorldSpaceCameraPos;
  float4x4 glstate_matrix_mvp;
};
vertex xlatMtlShaderOutput xlatMtlMain (xlatMtlShaderInput _mtl_i [[stage_in]], constant xlatMtlShaderUniform& _mtl_u [[buffer(0)]])
{
  xlatMtlShaderOutput _mtl_o;
  float3 tmpvar_1;
  float4 tmpvar_2;
  tmpvar_1 = float3(_mtl_i._inNormal);
  tmpvar_2 = float4(_mtl_i._color);
  half4 tmpvar_3;
  float3 localDir_4;
  float3 tmpvar_5;
  tmpvar_5.z = 0.0;
  tmpvar_5.xy = (float2(0.5, 0.5) - tmpvar_2.xy);
  float3 tmpvar_6;
  tmpvar_6 = (tmpvar_5 * _mtl_i._uv1.xyy);
  float3 tmpvar_7;
  tmpvar_7 = (_mtl_i._inVertex.xyz + tmpvar_6);
  float4 tmpvar_8;
  tmpvar_8.w = 1.0;
  tmpvar_8.xyz = _mtl_u._WorldSpaceCameraPos;
  float3 tmpvar_9;
  tmpvar_9 = ((_mtl_u._World2Object * tmpvar_8).xyz - tmpvar_7);
  localDir_4.xz = tmpvar_9.xz;
  localDir_4.y = mix (0.0, tmpvar_9.y, _mtl_u._VerticalBillboarding);
  float tmpvar_10;
  tmpvar_10 = sqrt(dot (localDir_4, localDir_4));
  float3 dir_11;
  dir_11 = (localDir_4 / tmpvar_10);
  float tmpvar_12;
  tmpvar_12 = abs(dir_11.y);
  float3 tmpvar_13;
  if ((tmpvar_12 > 0.999)) {
    tmpvar_13 = float3(0.0, 0.0, 1.0);
  } else {
    tmpvar_13 = float3(0.0, 1.0, 0.0);
  };
  float3 tmpvar_14;
  tmpvar_14 = normalize(((tmpvar_13.yzx * dir_11.zxy) - (tmpvar_13.zxy * dir_11.yzx)));
  float3 tmpvar_15;
  tmpvar_15 = ((dir_11.yzx * tmpvar_14.zxy) - (dir_11.zxy * tmpvar_14.yzx));
  float tmpvar_16;
  tmpvar_16 = min ((max (
    (tmpvar_10 - _mtl_u._SizeGrowStartDist)
  , 0.0) / _mtl_u._SizeGrowEndDist), 1.0);
  float3 tmpvar_17;
  tmpvar_17 = ((tmpvar_7 - (
    (tmpvar_14 * tmpvar_6.x)
   + 
    (tmpvar_15 * tmpvar_6.y)
  )) + ((
    (tmpvar_14 * tmpvar_1.x)
   + 
    (tmpvar_15 * tmpvar_1.y)
  ) * (
    ((tmpvar_16 * tmpvar_16) * _mtl_u._MaxGrowSize)
   * tmpvar_2.w)));
  float tmpvar_18;
  tmpvar_18 = (_mtl_u._Time.y + (_mtl_u._BlinkingTimeOffsScale * tmpvar_2.z));
  float y_19;
  y_19 = (_mtl_u._TimeOnDuration + _mtl_u._TimeOffDuration);
  float tmpvar_20;
  tmpvar_20 = (tmpvar_18 / y_19);
  float tmpvar_21;
  tmpvar_21 = (fract(abs(tmpvar_20)) * y_19);
  float tmpvar_22;
  if ((tmpvar_20 >= 0.0)) {
    tmpvar_22 = tmpvar_21;
  } else {
    tmpvar_22 = -(tmpvar_21);
  };
  float tmpvar_23;
  tmpvar_23 = clamp ((tmpvar_22 / (_mtl_u._TimeOnDuration * 0.25)), 0.0, 1.0);
  float edge0_24;
  edge0_24 = (_mtl_u._TimeOnDuration * 0.75);
  float tmpvar_25;
  tmpvar_25 = clamp (((tmpvar_22 - edge0_24) / (_mtl_u._TimeOnDuration - edge0_24)), 0.0, 1.0);
  float tmpvar_26;
  tmpvar_26 = ((tmpvar_23 * (tmpvar_23 * 
    (3.0 - (2.0 * tmpvar_23))
  )) * (1.0 - (tmpvar_25 * 
    (tmpvar_25 * (3.0 - (2.0 * tmpvar_25)))
  )));
  float tmpvar_27;
  tmpvar_27 = (tmpvar_18 * (6.28319 / _mtl_u._TimeOnDuration));
  float tmpvar_28;
  tmpvar_28 = ((_mtl_u._NoiseAmount * (
    sin(tmpvar_27)
   * 
    ((0.5 * cos((
      (tmpvar_27 * 0.6366)
     + 56.7272))) + 0.5)
  )) + (1.0 - _mtl_u._NoiseAmount));
  float tmpvar_29;
  if ((_mtl_u._NoiseAmount < 0.01)) {
    tmpvar_29 = tmpvar_26;
  } else {
    tmpvar_29 = tmpvar_28;
  };
  float4 tmpvar_30;
  tmpvar_30.w = 1.0;
  tmpvar_30.xyz = tmpvar_17;
  float tmpvar_31;
  tmpvar_31 = clamp ((tmpvar_10 / _mtl_u._FadeOutDistNear), 0.0, 1.0);
  float tmpvar_32;
  tmpvar_32 = (1.0 - clamp ((
    max ((tmpvar_10 - _mtl_u._FadeOutDistFar), 0.0)
   * 0.2), 0.0, 1.0));
  float tmpvar_33;
  tmpvar_33 = (tmpvar_31 * tmpvar_31);
  float4 tmpvar_34;
  tmpvar_34 = (((
    ((tmpvar_33 * tmpvar_33) * (tmpvar_32 * tmpvar_32))
   * _mtl_u._Color) * _mtl_u._Multiplier) * (tmpvar_29 + _mtl_u._Bias));
  tmpvar_3 = half4(tmpvar_34);
  _mtl_o.xlv_SV_POSITION = (_mtl_u.glstate_matrix_mvp * tmpvar_30);
  _mtl_o.xlv_TEXCOORD0 = _mtl_i._uv0.xy;
  _mtl_o.xlv_TEXCOORD1 = tmpvar_3;
  return _mtl_o;
}


// stats: 95 alu 0 tex 3 flow
// inputs: 5
//  #0: _inVertex (high float) 4x1 [-1] loc 0
//  #1: _inNormal (medium float) 3x1 [-1] loc 1
//  #2: _uv0 (high float) 4x1 [-1] loc 2
//  #3: _uv1 (high float) 4x1 [-1] loc 3
//  #4: _color (low float) 4x1 [-1] loc 4
// uniforms: 17 (total size: 240)
//  #0: _Bias (high float) 1x1 [-1] loc 0
//  #1: _BlinkingTimeOffsScale (high float) 1x1 [-1] loc 4
//  #2: _Color (high float) 4x1 [-1] loc 16
//  #3: _FadeOutDistFar (high float) 1x1 [-1] loc 32
//  #4: _FadeOutDistNear (high float) 1x1 [-1] loc 36
//  #5: _MaxGrowSize (high float) 1x1 [-1] loc 40
//  #6: _Multiplier (high float) 1x1 [-1] loc 44
//  #7: _NoiseAmount (high float) 1x1 [-1] loc 48
//  #8: _SizeGrowEndDist (high float) 1x1 [-1] loc 52
//  #9: _SizeGrowStartDist (high float) 1x1 [-1] loc 56
//  #10: _Time (high float) 4x1 [-1] loc 64
//  #11: _TimeOffDuration (high float) 1x1 [-1] loc 80
//  #12: _TimeOnDuration (high float) 1x1 [-1] loc 84
//  #13: _VerticalBillboarding (high float) 1x1 [-1] loc 88
//  #14: _World2Object (high float) 4x4 [-1] loc 96
//  #15: _WorldSpaceCameraPos (high float) 3x1 [-1] loc 160
//  #16: glstate_matrix_mvp (high float) 4x4 [-1] loc 176
