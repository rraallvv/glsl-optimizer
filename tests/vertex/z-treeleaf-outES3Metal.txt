#include <metal_stdlib>
using namespace metal;
struct xlatMtlShaderInput {
  float4 _inVertex [[attribute(0)]];
  half3 _inNormal [[attribute(1)]];
  float4 _uv0 [[attribute(2)]];
  float4 _uv1 [[attribute(3)]];
  half4 _color [[attribute(4)]];
  half4 TANGENT [[attribute(5)]];
};
struct xlatMtlShaderOutput {
  float4 gl_Position [[position]];
  float2 xlv_TEXCOORD0;
  half4 xlv_COLOR0;
  half3 xlv_TEXCOORD1;
  half3 xlv_TEXCOORD2;
  half2 xlv_TEXCOORD3;
};
struct xlatMtlShaderUniform {
  float4x4 _LightMatrix0;
  float4 _MainTex_ST;
  float4x4 _Object2World;
  float4 _Scale;
  float _SquashAmount;
  float4 _SquashPlaneNormal;
  float4 _Time;
  float4 _Wind;
  float4x4 _World2Object;
  float3 _WorldSpaceCameraPos;
  float4 _WorldSpaceLightPos0;
  float4x4 glstate_matrix_invtrans_modelview0;
  float4x4 glstate_matrix_mvp;
  float4 unity_Scale;
};
vertex xlatMtlShaderOutput xlatMtlMain (xlatMtlShaderInput _mtl_i [[stage_in]], constant xlatMtlShaderUniform& _mtl_u [[buffer(0)]])
{
  xlatMtlShaderOutput _mtl_o;
  float4 tmpvar_1;
  float3 tmpvar_2;
  float4 tmpvar_3;
  tmpvar_1 = float4(_mtl_i.TANGENT);
  tmpvar_2 = float3(_mtl_i._inNormal);
  tmpvar_3 = float4(_mtl_i._color);
  float4 tmpvar_4;
  float4 tmpvar_5;
  float tmpvar_6;
  tmpvar_6 = (1.0 - abs(tmpvar_1.w));
  float4 tmpvar_7;
  tmpvar_7.w = 0.0;
  tmpvar_7.xyz = tmpvar_2;
  float4 tmpvar_8;
  tmpvar_8.w = 0.0;
  tmpvar_8.xyz = tmpvar_1.xyz;
  float4 tmpvar_9;
  tmpvar_9.zw = float2(0.0, 0.0);
  tmpvar_9.xy = tmpvar_2.xy;
  float4 tmpvar_10;
  tmpvar_10 = (_mtl_i._inVertex + ((tmpvar_9 * _mtl_u.glstate_matrix_invtrans_modelview0) * tmpvar_6));
  float3 tmpvar_11;
  tmpvar_11 = mix (tmpvar_2, normalize((tmpvar_7 * _mtl_u.glstate_matrix_invtrans_modelview0)).xyz, float3(tmpvar_6));
  float4 tmpvar_12;
  tmpvar_12.w = -1.0;
  tmpvar_12.xyz = normalize((tmpvar_8 * _mtl_u.glstate_matrix_invtrans_modelview0)).xyz;
  float4 tmpvar_13;
  tmpvar_13 = mix (tmpvar_1, tmpvar_12, float4(tmpvar_6));
  tmpvar_4.w = tmpvar_10.w;
  tmpvar_5.w = tmpvar_13.w;
  tmpvar_4.xyz = (tmpvar_10.xyz * _mtl_u._Scale.xyz);
  float4 pos_14;
  pos_14.w = tmpvar_4.w;
  float3 bend_15;
  float tmpvar_16;
  tmpvar_16 = (dot (_mtl_u._Object2World[3].xyz, float3(1.0, 1.0, 1.0)) + tmpvar_3.x);
  float2 tmpvar_17;
  tmpvar_17.x = dot (tmpvar_4.xyz, float3((tmpvar_3.y + tmpvar_16)));
  tmpvar_17.y = tmpvar_16;
  float4 tmpvar_18;
  tmpvar_18 = abs(((
    fract((((
      fract(((_mtl_u._Time.yy + tmpvar_17).xxyy * float4(1.975, 0.793, 0.375, 0.193)))
     * 2.0) - 1.0) + 0.5))
   * 2.0) - 1.0));
  float4 tmpvar_19;
  tmpvar_19 = ((tmpvar_18 * tmpvar_18) * (3.0 - (2.0 * tmpvar_18)));
  float2 tmpvar_20;
  tmpvar_20 = (tmpvar_19.xz + tmpvar_19.yw);
  bend_15.xz = ((tmpvar_3.y * 0.1) * tmpvar_11).xz;
  bend_15.y = (_mtl_i._uv1.y * 0.3);
  pos_14.xyz = (tmpvar_4.xyz + ((
    (tmpvar_20.xyx * bend_15)
   + 
    ((_mtl_u._Wind.xyz * tmpvar_20.y) * _mtl_i._uv1.y)
  ) * _mtl_u._Wind.w));
  pos_14.xyz = (pos_14.xyz + (_mtl_i._uv1.x * _mtl_u._Wind.xyz));
  float3 tmpvar_21;
  tmpvar_21 = mix ((pos_14.xyz - (
    (dot (_mtl_u._SquashPlaneNormal.xyz, pos_14.xyz) + _mtl_u._SquashPlaneNormal.w)
   * _mtl_u._SquashPlaneNormal.xyz)), pos_14.xyz, float3(_mtl_u._SquashAmount));
  float4 tmpvar_22;
  tmpvar_22.w = 1.0;
  tmpvar_22.xyz = tmpvar_21;
  tmpvar_4 = tmpvar_22;
  float4 tmpvar_23;
  tmpvar_23.xyz = float3(1.0, 1.0, 1.0);
  tmpvar_23.w = tmpvar_3.w;
  float3 tmpvar_24;
  tmpvar_24 = normalize(tmpvar_11);
  tmpvar_5.xyz = normalize(tmpvar_13.xyz);
  float3 tmpvar_25;
  tmpvar_25 = (((tmpvar_24.yzx * tmpvar_5.zxy) - (tmpvar_24.zxy * tmpvar_5.yzx)) * tmpvar_13.w);
  float3x3 tmpvar_26;
  tmpvar_26[0].x = tmpvar_5.x;
  tmpvar_26[0].y = tmpvar_25.x;
  tmpvar_26[0].z = tmpvar_24.x;
  tmpvar_26[1].x = tmpvar_5.y;
  tmpvar_26[1].y = tmpvar_25.y;
  tmpvar_26[1].z = tmpvar_24.y;
  tmpvar_26[2].x = tmpvar_5.z;
  tmpvar_26[2].y = tmpvar_25.z;
  tmpvar_26[2].z = tmpvar_24.z;
  float4 tmpvar_27;
  tmpvar_27.w = 1.0;
  tmpvar_27.xyz = _mtl_u._WorldSpaceCameraPos;
  _mtl_o.gl_Position = (_mtl_u.glstate_matrix_mvp * tmpvar_22);
  _mtl_o.xlv_TEXCOORD0 = ((_mtl_i._uv0.xy * _mtl_u._MainTex_ST.xy) + _mtl_u._MainTex_ST.zw);
  _mtl_o.xlv_COLOR0 = half4(tmpvar_23);
  float3 tmpvar_28;
  tmpvar_28 = (tmpvar_26 * (_mtl_u._World2Object * _mtl_u._WorldSpaceLightPos0).xyz);
  _mtl_o.xlv_TEXCOORD1 = half3(tmpvar_28);
  float3 tmpvar_29;
  tmpvar_29 = (tmpvar_26 * ((
    (_mtl_u._World2Object * tmpvar_27)
  .xyz * _mtl_u.unity_Scale.w) - tmpvar_21));
  _mtl_o.xlv_TEXCOORD2 = half3(tmpvar_29);
  float2 tmpvar_30;
  tmpvar_30 = (_mtl_u._LightMatrix0 * (_mtl_u._Object2World * tmpvar_22)).xy;
  _mtl_o.xlv_TEXCOORD3 = half2(tmpvar_30);
  return _mtl_o;
}


// stats: 71 alu 0 tex 0 flow
// inputs: 6
//  #0: _inVertex (high float) 4x1 [-1] loc 0
//  #1: _inNormal (medium float) 3x1 [-1] loc 1
//  #2: _uv0 (high float) 4x1 [-1] loc 2
//  #3: _uv1 (high float) 4x1 [-1] loc 3
//  #4: _color (low float) 4x1 [-1] loc 4
//  #5: TANGENT (medium float) 4x1 [-1] loc 5
// uniforms: 14 (total size: 464)
//  #0: _LightMatrix0 (high float) 4x4 [-1] loc 0
//  #1: _MainTex_ST (high float) 4x1 [-1] loc 64
//  #2: _Object2World (high float) 4x4 [-1] loc 80
//  #3: _Scale (high float) 4x1 [-1] loc 144
//  #4: _SquashAmount (high float) 1x1 [-1] loc 160
//  #5: _SquashPlaneNormal (high float) 4x1 [-1] loc 176
//  #6: _Time (high float) 4x1 [-1] loc 192
//  #7: _Wind (high float) 4x1 [-1] loc 208
//  #8: _World2Object (high float) 4x4 [-1] loc 224
//  #9: _WorldSpaceCameraPos (high float) 3x1 [-1] loc 288
//  #10: _WorldSpaceLightPos0 (high float) 4x1 [-1] loc 304
//  #11: glstate_matrix_invtrans_modelview0 (high float) 4x4 [-1] loc 320
//  #12: glstate_matrix_mvp (high float) 4x4 [-1] loc 384
//  #13: unity_Scale (high float) 4x1 [-1] loc 448
