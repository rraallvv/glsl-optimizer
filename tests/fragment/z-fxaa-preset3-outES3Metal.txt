#include <metal_stdlib>
using namespace metal;
struct xlatMtlShaderInput {
  float2 xlv_TEXCOORD0;
};
struct xlatMtlShaderOutput {
  half4 _fragData [[color(0)]];
};
struct xlatMtlShaderUniform {
  float4 _MainTex_TexelSize;
};
fragment xlatMtlShaderOutput xlatMtlMain (xlatMtlShaderInput _mtl_i [[stage_in]], constant xlatMtlShaderUniform& _mtl_u [[buffer(0)]]
  ,   texture2d<half> _MainTex [[texture(0)]], sampler _mtlsmp__MainTex [[sampler(0)]])
{
  xlatMtlShaderOutput _mtl_o;
  float2 rcpFrame_1;
  rcpFrame_1 = _mtl_u._MainTex_TexelSize.xy;
  half3 tmpvar_2;
  bool doneP_4;
  bool doneN_5;
  half lumaEndP_6;
  half lumaEndN_7;
  float2 offNP_8;
  float2 posP_9;
  float2 posN_10;
  half gradientN_11;
  float lengthSign_12;
  half lumaS_13;
  half lumaN_14;
  float4 tmpvar_15;
  tmpvar_15.zw = float2(0.0, 0.0);
  tmpvar_15.xy = (_mtl_i.xlv_TEXCOORD0 + (float2(0.0, -1.0) * _mtl_u._MainTex_TexelSize.xy));
  half4 tmpvar_16;
  tmpvar_16 = _MainTex.sample(_mtlsmp__MainTex, (float2)(tmpvar_15.xy), level(0.0));
  float4 tmpvar_17;
  tmpvar_17.zw = float2(0.0, 0.0);
  tmpvar_17.xy = (_mtl_i.xlv_TEXCOORD0 + (float2(-1.0, 0.0) * _mtl_u._MainTex_TexelSize.xy));
  half4 tmpvar_18;
  tmpvar_18 = _MainTex.sample(_mtlsmp__MainTex, (float2)(tmpvar_17.xy), level(0.0));
  half4 tmpvar_19;
  tmpvar_19 = _MainTex.sample(_mtlsmp__MainTex, (float2)(_mtl_i.xlv_TEXCOORD0), level(0.0));
  float4 tmpvar_20;
  tmpvar_20.zw = float2(0.0, 0.0);
  tmpvar_20.xy = (_mtl_i.xlv_TEXCOORD0 + (float2(1.0, 0.0) * _mtl_u._MainTex_TexelSize.xy));
  half4 tmpvar_21;
  tmpvar_21 = _MainTex.sample(_mtlsmp__MainTex, (float2)(tmpvar_20.xy), level(0.0));
  float4 tmpvar_22;
  tmpvar_22.zw = float2(0.0, 0.0);
  tmpvar_22.xy = (_mtl_i.xlv_TEXCOORD0 + (float2(0.0, 1.0) * _mtl_u._MainTex_TexelSize.xy));
  half4 tmpvar_23;
  tmpvar_23 = _MainTex.sample(_mtlsmp__MainTex, (float2)(tmpvar_22.xy), level(0.0));
  half tmpvar_24;
  tmpvar_24 = ((tmpvar_16.y * (half)1.96321) + tmpvar_16.x);
  lumaN_14 = tmpvar_24;
  half tmpvar_25;
  tmpvar_25 = ((tmpvar_18.y * (half)1.96321) + tmpvar_18.x);
  half tmpvar_26;
  tmpvar_26 = ((tmpvar_19.y * (half)1.96321) + tmpvar_19.x);
  half tmpvar_27;
  tmpvar_27 = ((tmpvar_21.y * (half)1.96321) + tmpvar_21.x);
  half tmpvar_28;
  tmpvar_28 = ((tmpvar_23.y * (half)1.96321) + tmpvar_23.x);
  lumaS_13 = tmpvar_28;
  half tmpvar_29;
  tmpvar_29 = max (tmpvar_26, max (max (tmpvar_24, tmpvar_25), max (tmpvar_28, tmpvar_27)));
  half tmpvar_30;
  tmpvar_30 = (tmpvar_29 - min (tmpvar_26, min (
    min (tmpvar_24, tmpvar_25)
  , 
    min (tmpvar_28, tmpvar_27)
  )));
  half tmpvar_31;
  tmpvar_31 = max ((half)0.0416667, (tmpvar_29 * (half)0.125));
  if ((tmpvar_30 < tmpvar_31)) {
    tmpvar_2 = tmpvar_19.xyz;
  } else {
    half tmpvar_32;
    tmpvar_32 = min ((half)0.75, (max ((half)0.0, 
      ((abs((
        ((((tmpvar_24 + tmpvar_25) + tmpvar_27) + tmpvar_28) * (half)0.25)
       - tmpvar_26)) / tmpvar_30) - (half)0.25)
    ) * (half)1.33333));
    float4 tmpvar_33;
    tmpvar_33.zw = float2(0.0, 0.0);
    tmpvar_33.xy = (_mtl_i.xlv_TEXCOORD0 - _mtl_u._MainTex_TexelSize.xy);
    half4 tmpvar_34;
    tmpvar_34 = _MainTex.sample(_mtlsmp__MainTex, (float2)(tmpvar_33.xy), level(0.0));
    float4 tmpvar_35;
    tmpvar_35.zw = float2(0.0, 0.0);
    tmpvar_35.xy = (_mtl_i.xlv_TEXCOORD0 + (float2(1.0, -1.0) * _mtl_u._MainTex_TexelSize.xy));
    half4 tmpvar_36;
    tmpvar_36 = _MainTex.sample(_mtlsmp__MainTex, (float2)(tmpvar_35.xy), level(0.0));
    float4 tmpvar_37;
    tmpvar_37.zw = float2(0.0, 0.0);
    tmpvar_37.xy = (_mtl_i.xlv_TEXCOORD0 + (float2(-1.0, 1.0) * _mtl_u._MainTex_TexelSize.xy));
    half4 tmpvar_38;
    tmpvar_38 = _MainTex.sample(_mtlsmp__MainTex, (float2)(tmpvar_37.xy), level(0.0));
    float4 tmpvar_39;
    tmpvar_39.zw = float2(0.0, 0.0);
    tmpvar_39.xy = (_mtl_i.xlv_TEXCOORD0 + _mtl_u._MainTex_TexelSize.xy);
    half4 tmpvar_40;
    tmpvar_40 = _MainTex.sample(_mtlsmp__MainTex, (float2)(tmpvar_39.xy), level(0.0));
    half3 tmpvar_41;
    tmpvar_41 = (((
      (((tmpvar_16.xyz + tmpvar_18.xyz) + tmpvar_19.xyz) + tmpvar_21.xyz)
     + tmpvar_23.xyz) + (
      ((tmpvar_34.xyz + tmpvar_36.xyz) + tmpvar_38.xyz)
     + tmpvar_40.xyz)) * (half3)float3(0.111111, 0.111111, 0.111111));
    half tmpvar_42;
    tmpvar_42 = ((tmpvar_34.y * (half)1.96321) + tmpvar_34.x);
    half tmpvar_43;
    tmpvar_43 = ((tmpvar_36.y * (half)1.96321) + tmpvar_36.x);
    half tmpvar_44;
    tmpvar_44 = ((tmpvar_38.y * (half)1.96321) + tmpvar_38.x);
    half tmpvar_45;
    tmpvar_45 = ((tmpvar_40.y * (half)1.96321) + tmpvar_40.x);
    bool tmpvar_46;
    tmpvar_46 = (((
      abs(((((half)0.25 * tmpvar_42) + ((half)-0.5 * tmpvar_25)) + ((half)0.25 * tmpvar_44)))
     + 
      abs(((((half)0.5 * tmpvar_24) - tmpvar_26) + ((half)0.5 * tmpvar_28)))
    ) + abs(
      ((((half)0.25 * tmpvar_43) + ((half)-0.5 * tmpvar_27)) + ((half)0.25 * tmpvar_45))
    )) >= ((
      abs(((((half)0.25 * tmpvar_42) + ((half)-0.5 * tmpvar_24)) + ((half)0.25 * tmpvar_43)))
     + 
      abs(((((half)0.5 * tmpvar_25) - tmpvar_26) + ((half)0.5 * tmpvar_27)))
    ) + abs(
      ((((half)0.25 * tmpvar_44) + ((half)-0.5 * tmpvar_28)) + ((half)0.25 * tmpvar_45))
    )));
    float tmpvar_47;
    if (tmpvar_46) {
      tmpvar_47 = -(_mtl_u._MainTex_TexelSize.y);
    } else {
      tmpvar_47 = -(_mtl_u._MainTex_TexelSize.x);
    };
    lengthSign_12 = tmpvar_47;
    if (!(tmpvar_46)) {
      lumaN_14 = tmpvar_25;
    };
    if (!(tmpvar_46)) {
      lumaS_13 = tmpvar_27;
    };
    half tmpvar_48;
    tmpvar_48 = abs((lumaN_14 - tmpvar_26));
    gradientN_11 = tmpvar_48;
    half tmpvar_49;
    tmpvar_49 = abs((lumaS_13 - tmpvar_26));
    lumaN_14 = ((lumaN_14 + tmpvar_26) * (half)0.5);
    half tmpvar_50;
    tmpvar_50 = ((lumaS_13 + tmpvar_26) * (half)0.5);
    lumaS_13 = tmpvar_50;
    bool tmpvar_51;
    tmpvar_51 = (tmpvar_48 >= tmpvar_49);
    if (!(tmpvar_51)) {
      lumaN_14 = tmpvar_50;
    };
    if (!(tmpvar_51)) {
      gradientN_11 = tmpvar_49;
    };
    if (!(tmpvar_51)) {
      lengthSign_12 = -(tmpvar_47);
    };
    float tmpvar_52;
    if (tmpvar_46) {
      tmpvar_52 = 0.0;
    } else {
      tmpvar_52 = (lengthSign_12 * 0.5);
    };
    posN_10.x = (_mtl_i.xlv_TEXCOORD0.x + tmpvar_52);
    float tmpvar_53;
    if (tmpvar_46) {
      tmpvar_53 = (lengthSign_12 * 0.5);
    } else {
      tmpvar_53 = 0.0;
    };
    posN_10.y = (_mtl_i.xlv_TEXCOORD0.y + tmpvar_53);
    gradientN_11 = (gradientN_11 * (half)0.25);
    posP_9 = posN_10;
    float2 tmpvar_54;
    if (tmpvar_46) {
      float2 tmpvar_55;
      tmpvar_55.y = 0.0;
      tmpvar_55.x = rcpFrame_1.x;
      tmpvar_54 = tmpvar_55;
    } else {
      float2 tmpvar_56;
      tmpvar_56.x = 0.0;
      tmpvar_56.y = rcpFrame_1.y;
      tmpvar_54 = tmpvar_56;
    };
    offNP_8 = tmpvar_54;
    lumaEndN_7 = lumaN_14;
    lumaEndP_6 = lumaN_14;
    doneN_5 = bool(bool(0));
    doneP_4 = bool(bool(0));
    posN_10 = (posN_10 - tmpvar_54);
    posP_9 = (posP_9 + tmpvar_54);
    for (int i_3 = 0; i_3 < 16; i_3++) {
      if (!(doneN_5)) {
        half4 tmpvar_57;
        tmpvar_57 = _MainTex.sample(_mtlsmp__MainTex, (float2)(posN_10), level(0.0));
        lumaEndN_7 = ((tmpvar_57.y * (half)1.96321) + tmpvar_57.x);
      };
      if (!(doneP_4)) {
        half4 tmpvar_58;
        tmpvar_58 = _MainTex.sample(_mtlsmp__MainTex, (float2)(posP_9), level(0.0));
        lumaEndP_6 = ((tmpvar_58.y * (half)1.96321) + tmpvar_58.x);
      };
      bool tmpvar_59;
      if (doneN_5) {
        tmpvar_59 = bool(bool(1));
      } else {
        tmpvar_59 = (abs((lumaEndN_7 - lumaN_14)) >= gradientN_11);
      };
      doneN_5 = tmpvar_59;
      bool tmpvar_60;
      if (doneP_4) {
        tmpvar_60 = bool(bool(1));
      } else {
        tmpvar_60 = (abs((lumaEndP_6 - lumaN_14)) >= gradientN_11);
      };
      doneP_4 = tmpvar_60;
      if ((tmpvar_59 && tmpvar_60)) {
        break;
      };
      if (!(tmpvar_59)) {
        posN_10 = (posN_10 - offNP_8);
      };
      if (!(tmpvar_60)) {
        posP_9 = (posP_9 + offNP_8);
      };
    };
    float tmpvar_61;
    if (tmpvar_46) {
      tmpvar_61 = (_mtl_i.xlv_TEXCOORD0.x - posN_10.x);
    } else {
      tmpvar_61 = (_mtl_i.xlv_TEXCOORD0.y - posN_10.y);
    };
    float tmpvar_62;
    if (tmpvar_46) {
      tmpvar_62 = (posP_9.x - _mtl_i.xlv_TEXCOORD0.x);
    } else {
      tmpvar_62 = (posP_9.y - _mtl_i.xlv_TEXCOORD0.y);
    };
    bool tmpvar_63;
    tmpvar_63 = (tmpvar_61 < tmpvar_62);
    half tmpvar_64;
    if (tmpvar_63) {
      tmpvar_64 = lumaEndN_7;
    } else {
      tmpvar_64 = lumaEndP_6;
    };
    lumaEndN_7 = tmpvar_64;
    if ((((tmpvar_26 - lumaN_14) < (half)0.0) == ((tmpvar_64 - lumaN_14) < (half)0.0))) {
      lengthSign_12 = 0.0;
    };
    float tmpvar_65;
    tmpvar_65 = (tmpvar_62 + tmpvar_61);
    float tmpvar_66;
    if (tmpvar_63) {
      tmpvar_66 = tmpvar_61;
    } else {
      tmpvar_66 = tmpvar_62;
    };
    float tmpvar_67;
    tmpvar_67 = ((0.5 + (tmpvar_66 * 
      (-1.0 / tmpvar_65)
    )) * lengthSign_12);
    float tmpvar_68;
    if (tmpvar_46) {
      tmpvar_68 = 0.0;
    } else {
      tmpvar_68 = tmpvar_67;
    };
    float tmpvar_69;
    if (tmpvar_46) {
      tmpvar_69 = tmpvar_67;
    } else {
      tmpvar_69 = 0.0;
    };
    float2 tmpvar_70;
    tmpvar_70.x = (_mtl_i.xlv_TEXCOORD0.x + tmpvar_68);
    tmpvar_70.y = (_mtl_i.xlv_TEXCOORD0.y + tmpvar_69);
    half4 tmpvar_71;
    tmpvar_71 = _MainTex.sample(_mtlsmp__MainTex, (float2)(tmpvar_70), level(0.0));
    half3 tmpvar_72;
    tmpvar_72.x = -(tmpvar_32);
    tmpvar_72.y = -(tmpvar_32);
    tmpvar_72.z = -(tmpvar_32);
    tmpvar_2 = ((tmpvar_72 * tmpvar_71.xyz) + ((tmpvar_41 * half3(tmpvar_32)) + tmpvar_71.xyz));
  };
  half4 tmpvar_73;
  tmpvar_73.w = half(0.0);
  tmpvar_73.xyz = tmpvar_2;
  _mtl_o._fragData = tmpvar_73;
  return _mtl_o;
}


// stats: 191 alu 12 tex 26 flow
// inputs: 1
//  #0: xlv_TEXCOORD0 (high float) 2x1 [-1]
// uniforms: 1 (total size: 16)
//  #0: _MainTex_TexelSize (high float) 4x1 [-1] loc 0
// textures: 1
//  #0: _MainTex (low 2d) 0x0 [-1] loc 0
