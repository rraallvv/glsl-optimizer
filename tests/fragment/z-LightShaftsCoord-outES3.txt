#version 300 es
layout(location=0) out mediump vec4 _glesFragData[4];
uniform highp vec4 _ZBufferParams;
uniform highp vec4 _LightPos;
uniform highp mat4 _FrustumRays;
uniform highp vec4 _CameraPosLocal;
uniform highp vec4 _CoordTexDim;
uniform highp vec4 _ScreenTexDim;
uniform sampler2D _CameraDepthTexture;
in highp vec2 xlv_TEXCOORD0;
void main ()
{
  highp vec4 depth_1;
  highp float tmpvar_2;
  tmpvar_2 = clamp ((xlv_TEXCOORD0.y - (0.5 / _CoordTexDim.y)), 0.0, 1.0);
  int tmpvar_3;
  tmpvar_3 = int(clamp (floor(
    (tmpvar_2 * 4.0)
  ), 0.0, 3.0));
  highp float tmpvar_4;
  tmpvar_4 = (-1.0 + (2.0 * fract(
    (tmpvar_2 * 4.0)
  )));
  highp vec4 tmpvar_5;
  tmpvar_5.xz = vec2(-1.0, 1.0);
  tmpvar_5.y = tmpvar_4;
  tmpvar_5.w = -(tmpvar_4);
  highp vec4 tmpvar_6;
  tmpvar_6.yw = vec2(-1.0, 1.0);
  tmpvar_6.x = -(tmpvar_4);
  tmpvar_6.z = tmpvar_4;
  bvec4 tmpvar_7;
  tmpvar_7 = equal (ivec4(tmpvar_3), ivec4(0, 1, 2, 3));
  lowp vec4 tmpvar_8;
  tmpvar_8 = vec4(tmpvar_7);
  lowp vec4 tmpvar_9;
  tmpvar_9 = vec4(tmpvar_7);
  highp vec2 tmpvar_10;
  tmpvar_10.x = dot (tmpvar_6, tmpvar_8);
  tmpvar_10.y = dot (tmpvar_5, tmpvar_9);
  highp vec2 tmpvar_11;
  tmpvar_11 = ((mix (_LightPos.xy, 
    -(tmpvar_10)
  , vec2(
    clamp (((xlv_TEXCOORD0.x - (0.5 / _CoordTexDim.x)) * (_CoordTexDim.x / (_CoordTexDim.x - 1.0))), 0.0, 1.0)
  )) * 0.5) + 0.5);
  highp vec4 tmpvar_12;
  tmpvar_12.zw = vec2(0.0, 0.0);
  tmpvar_12.xy = tmpvar_11;
  highp vec2 tmpvar_13;
  tmpvar_13 = ((floor(
    (tmpvar_11 * _ScreenTexDim.xy)
  ) + 0.5) * _ScreenTexDim.zw);
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture (_CameraDepthTexture, tmpvar_13);
  highp float tmpvar_15;
  highp float z_16;
  z_16 = tmpvar_14.x;
  tmpvar_15 = (1.0/(((_ZBufferParams.x * z_16) + _ZBufferParams.y)));
  depth_1 = vec4(tmpvar_15);
  highp vec4 v_17;
  v_17.x = _FrustumRays[0].x;
  v_17.y = _FrustumRays[1].x;
  v_17.z = _FrustumRays[2].x;
  v_17.w = _FrustumRays[3].x;
  highp vec4 v_18;
  v_18.x = _FrustumRays[0].y;
  v_18.y = _FrustumRays[1].y;
  v_18.z = _FrustumRays[2].y;
  v_18.w = _FrustumRays[3].y;
  highp vec4 v_19;
  v_19.x = _FrustumRays[0].w;
  v_19.y = _FrustumRays[1].w;
  v_19.z = _FrustumRays[2].w;
  v_19.w = _FrustumRays[3].w;
  highp vec4 v_20;
  v_20.x = _FrustumRays[0].z;
  v_20.y = _FrustumRays[1].z;
  v_20.z = _FrustumRays[2].z;
  v_20.w = _FrustumRays[3].z;
  highp vec3 tmpvar_21;
  tmpvar_21 = mix (mix (v_17.xyz, v_18.xyz, tmpvar_11.xxx), mix (v_19.xyz, v_20.xyz, tmpvar_11.xxx), tmpvar_11.yyy);
  highp float tmpvar_22;
  tmpvar_22 = sqrt(dot (tmpvar_21, tmpvar_21));
  bool tmpvar_23;
  highp vec3 tmpvar_24;
  tmpvar_24 = (1.0/((tmpvar_21 / tmpvar_22)));
  highp vec3 tmpvar_25;
  tmpvar_25 = (tmpvar_24 * (-0.5 - _CameraPosLocal.xyz));
  highp vec3 tmpvar_26;
  tmpvar_26 = (tmpvar_24 * (0.5 - _CameraPosLocal.xyz));
  highp vec3 tmpvar_27;
  tmpvar_27 = min (tmpvar_26, tmpvar_25);
  highp vec3 tmpvar_28;
  tmpvar_28 = max (tmpvar_26, tmpvar_25);
  highp vec2 tmpvar_29;
  tmpvar_29 = max (tmpvar_27.xx, tmpvar_27.yz);
  highp float tmpvar_30;
  tmpvar_30 = max (tmpvar_29.x, tmpvar_29.y);
  highp vec2 tmpvar_31;
  tmpvar_31 = min (tmpvar_28.xx, tmpvar_28.yz);
  highp float tmpvar_32;
  tmpvar_32 = min (tmpvar_31.x, tmpvar_31.y);
  tmpvar_23 = ((tmpvar_30 < tmpvar_32) && (tmpvar_32 > 0.0));
  if ((!(tmpvar_23) || (tmpvar_15 < (tmpvar_30 / tmpvar_22)))) {
    depth_1 = -(vec4(tmpvar_15));
  } else {
    depth_1 = min (depth_1, vec4((tmpvar_32 / tmpvar_22)));
  };
  _glesFragData[0] = tmpvar_12;
  _glesFragData[1] = depth_1;
}


// stats: 65 alu 1 tex 1 flow
// inputs: 1
//  #0: xlv_TEXCOORD0 (high float) 2x1 [-1]
// uniforms: 6 (total size: 0)
//  #0: _ZBufferParams (high float) 4x1 [-1]
//  #1: _LightPos (high float) 4x1 [-1]
//  #2: _FrustumRays (high float) 4x4 [-1]
//  #3: _CameraPosLocal (high float) 4x1 [-1]
//  #4: _CoordTexDim (high float) 4x1 [-1]
//  #5: _ScreenTexDim (high float) 4x1 [-1]
// textures: 1
//  #0: _CameraDepthTexture (low 2d) 0x0 [-1]
