#include <metal_stdlib>
using namespace metal;
struct xlatMtlShaderInput {
  float4 xlv_TEXCOORD0;
};
struct xlatMtlShaderOutput {
  half4 _fragData [[color(0)]];
};
struct xlatMtlShaderUniform {
};
fragment xlatMtlShaderOutput xlatMtlMain (xlatMtlShaderInput _mtl_i [[stage_in]], constant xlatMtlShaderUniform& _mtl_u [[buffer(0)]])
{
  xlatMtlShaderOutput _mtl_o;
  half4 tmpvar_1;
  bool4 tmpvar_2;
  tmpvar_2 = bool4((_mtl_i.xlv_TEXCOORD0 > float4(0.5, 0.5, 0.5, 0.5)));
  float tmpvar_3;
  if (tmpvar_2.x) {
    tmpvar_3 = 1.0;
  } else {
    tmpvar_3 = 5.0;
  };
  float tmpvar_4;
  if (tmpvar_2.y) {
    tmpvar_4 = 2.0;
  } else {
    tmpvar_4 = 6.0;
  };
  float tmpvar_5;
  if (tmpvar_2.z) {
    tmpvar_5 = 3.0;
  } else {
    tmpvar_5 = 7.0;
  };
  float tmpvar_6;
  if (tmpvar_2.w) {
    tmpvar_6 = 4.0;
  } else {
    tmpvar_6 = 8.0;
  };
  float4 tmpvar_7;
  tmpvar_7.x = tmpvar_3;
  tmpvar_7.y = tmpvar_4;
  tmpvar_7.z = tmpvar_5;
  tmpvar_7.w = tmpvar_6;
  bool4 tmpvar_8;
  tmpvar_8 = bool4((_mtl_i.xlv_TEXCOORD0 > float4(0.5, 0.5, 0.5, 0.5)));
  float tmpvar_9;
  if (tmpvar_8.x) {
    tmpvar_9 = 1.0;
  } else {
    tmpvar_9 = 5.0;
  };
  float tmpvar_10;
  if (tmpvar_8.y) {
    tmpvar_10 = 2.0;
  } else {
    tmpvar_10 = 6.0;
  };
  float tmpvar_11;
  if (tmpvar_8.z) {
    tmpvar_11 = 3.0;
  } else {
    tmpvar_11 = 7.0;
  };
  float tmpvar_12;
  if (tmpvar_8.w) {
    tmpvar_12 = 4.0;
  } else {
    tmpvar_12 = 8.0;
  };
  float4 tmpvar_13;
  tmpvar_13.x = tmpvar_9;
  tmpvar_13.y = tmpvar_10;
  tmpvar_13.z = tmpvar_11;
  tmpvar_13.w = tmpvar_12;
  float4 tmpvar_14;
  tmpvar_14 = (tmpvar_7 + tmpvar_13);
  bool4 tmpvar_15;
  tmpvar_15 = bool4((_mtl_i.xlv_TEXCOORD0 > float4(0.5, 0.5, 0.5, 0.5)));
  float tmpvar_16;
  if (tmpvar_15.x) {
    tmpvar_16 = 1.0;
  } else {
    tmpvar_16 = 2.0;
  };
  float tmpvar_17;
  if (tmpvar_15.y) {
    tmpvar_17 = 1.0;
  } else {
    tmpvar_17 = 2.0;
  };
  float tmpvar_18;
  if (tmpvar_15.z) {
    tmpvar_18 = 1.0;
  } else {
    tmpvar_18 = 2.0;
  };
  float tmpvar_19;
  if (tmpvar_15.w) {
    tmpvar_19 = 1.0;
  } else {
    tmpvar_19 = 2.0;
  };
  float4 tmpvar_20;
  tmpvar_20.x = tmpvar_16;
  tmpvar_20.y = tmpvar_17;
  tmpvar_20.z = tmpvar_18;
  tmpvar_20.w = tmpvar_19;
  float4 tmpvar_21;
  tmpvar_21 = (tmpvar_14 + tmpvar_20);
  bool4 tmpvar_22;
  tmpvar_22 = bool4((_mtl_i.xlv_TEXCOORD0 > float4(0.5, 0.5, 0.5, 0.5)));
  float tmpvar_23;
  if (tmpvar_22.x) {
    tmpvar_23 = 1.0;
  } else {
    tmpvar_23 = 2.0;
  };
  float tmpvar_24;
  if (tmpvar_22.y) {
    tmpvar_24 = 1.0;
  } else {
    tmpvar_24 = 2.0;
  };
  float tmpvar_25;
  if (tmpvar_22.z) {
    tmpvar_25 = 1.0;
  } else {
    tmpvar_25 = 2.0;
  };
  float tmpvar_26;
  if (tmpvar_22.w) {
    tmpvar_26 = 1.0;
  } else {
    tmpvar_26 = 2.0;
  };
  float4 tmpvar_27;
  tmpvar_27.x = tmpvar_23;
  tmpvar_27.y = tmpvar_24;
  tmpvar_27.z = tmpvar_25;
  tmpvar_27.w = tmpvar_26;
  float4 tmpvar_28;
  tmpvar_28 = (tmpvar_21 + tmpvar_27);
  bool4 tmpvar_29;
  tmpvar_29 = bool4(fract(_mtl_i.xlv_TEXCOORD0));
  float tmpvar_30;
  if (tmpvar_29.x) {
    tmpvar_30 = 1.0;
  } else {
    tmpvar_30 = 2.0;
  };
  float tmpvar_31;
  if (tmpvar_29.y) {
    tmpvar_31 = 1.0;
  } else {
    tmpvar_31 = 2.0;
  };
  float tmpvar_32;
  if (tmpvar_29.z) {
    tmpvar_32 = 1.0;
  } else {
    tmpvar_32 = 2.0;
  };
  float tmpvar_33;
  if (tmpvar_29.w) {
    tmpvar_33 = 1.0;
  } else {
    tmpvar_33 = 2.0;
  };
  float4 tmpvar_34;
  tmpvar_34.x = tmpvar_30;
  tmpvar_34.y = tmpvar_31;
  tmpvar_34.z = tmpvar_32;
  tmpvar_34.w = tmpvar_33;
  float4 tmpvar_35;
  tmpvar_35 = (tmpvar_28 + tmpvar_34);
  tmpvar_1 = half4(tmpvar_35);
  _mtl_o._fragData = tmpvar_1;
  return _mtl_o;
}


// stats: 50 alu 0 tex 20 flow
// inputs: 1
//  #0: xlv_TEXCOORD0 (high float) 4x1 [-1]
